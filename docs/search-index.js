var searchIndex = JSON.parse('{\
"tydi":{"doc":"Tydi is an open specification for complex data structures…","i":[[3,"Logger","tydi","Simple logger for Tydi.",null,null],[3,"UniquelyNamedBuilder","","A builder for lists of things requiring unique names.",null,null],[3,"NonZeroReal","","",null,null],[3,"Name","","Type-safe wrapper for valid names.",null,null],[3,"PathName","","Type-safe path for names.",null,null],[4,"Error","","Error variants used in this crate.",null,null],[13,"UnknownError","","Unknown error.",0,null],[13,"CLIError","","Generic CLI error.",0,null],[13,"InvalidArgument","","Indicates an invalid argument is provided.",0,null],[13,"UnexpectedDuplicate","","Indicates an unexpected duplicate is provided.",0,null],[13,"FileIOError","","File I/O error.",0,null],[13,"ParsingError","","Parsing error.",0,null],[13,"InvalidTarget","","Invalid target.",0,null],[13,"BackEndError","","Back-end error.",0,null],[13,"InterfaceError","","Forbidden interface name.",0,null],[11,"new","","Construct a new builder.",1,[[]]],[11,"add_item","","Add an item to the builder.",1,[[]]],[11,"with_item","","Return this builder with the item appended.",1,[[]]],[11,"with_items","","Return this builder with the items appended.",1,[[]]],[11,"finish","","Finalize the builder, checking whether all names are…",1,[[],[["result",6],["vec",3]]]],[0,"design","","Constructs that are used to generate hardware designs,…",null,null],[0,"library","tydi::design","This module contains the [Library] structure, used to…",null,null],[3,"Library","tydi::design::library","A collection of Streamlets.",null,null],[11,"streamlets","","",2,[[],[["streamlet",3],["vec",3]]]],[11,"from_builder","","Construct a Library from a UniquelyNamedBuilder with…",2,[[["streamlet",3],["uniquelynamedbuilder",3],["name",3]],["result",6]]],[11,"from_file","","Construct a Library from a Streamlet Definition File.",2,[[["path",3]],["result",6]]],[0,"project","tydi::design","",null,null],[3,"Project","tydi::design::project","A collection of Streamlets.",null,null],[11,"from_builder","","Construct a Project from a UniquelyNamedBuilder with…",3,[[["uniquelynamedbuilder",3],["library",3],["name",3]],["result",6]]],[11,"libraries","","",3,[[]]],[0,"streamlet","tydi::design","This module contains the Streamlet structure.",null,null],[3,"Interface","tydi::design::streamlet","A Streamlet interface.",null,null],[3,"Streamlet","","Streamlet interface definition.",null,null],[4,"Mode","","Streamlet interface mode.",null,null],[13,"Out","","The interface is an output of the streamlet.",4,null],[13,"In","","The interface is an input of the streamlet.",4,null],[11,"mode","","Return the [Mode] of the interface.",5,[[],["mode",4]]],[11,"typ","","Return the [LogicalStreamType] of the interface.",5,[[],["logicaltype",4]]],[11,"try_new","","Try to construct a new interface.",5,[[["option",4],["mode",4]],["result",6]]],[11,"with_doc","","",5,[[]]],[11,"interfaces","","Return an iterator over the interfaces of this Streamlet.",6,[[]]],[11,"from_builder","","Construct a new streamlet from an interface builder that…",6,[[["name",3],["option",4],["interface",3],["uniquelynamedbuilder",3]],["result",6]]],[11,"with_doc","","Return this streamlet with documentation added.",6,[[]]],[0,"logical","tydi","Logical streams.",null,null],[3,"Stream","tydi::logical","The stream-manipulating logical stream type.",null,null],[3,"Group","","The Group stream type acts as a product type (composition).",null,null],[3,"Union","","Reference",null,null],[3,"ElementStream","","An element stream with a path name and LogicalType.…",null,null],[3,"Signals","","",null,null],[4,"Direction","","Direction of a stream.",null,null],[13,"Forward","","Forward indicates that the child stream flows in the same…",7,null],[13,"Reverse","","Reverse indicates that the child stream acts as a response…",7,null],[4,"Synchronicity","","The synchronicity of the elements in the child stream with…",null,null],[13,"Sync","","Indicating that there is a one-to-one relation between the…",8,null],[13,"Flatten","","Indicating that there is a one-to-one relation between the…",8,null],[13,"Desync","","Desync may be used if the relation between the elements in…",8,null],[13,"FlatDesync","","FlatDesync, finally, does the same thing as Desync, but…",8,null],[4,"LogicalType","","Types of logical streams.",null,null],[13,"Null","","The Null stream type indicates the transferrence of…",9,null],[13,"Bits","","The Bits stream type, defined as `Bits(b)`, indicates the…",9,null],[13,"Group","","The Group stream type acts as a product type (composition).",9,null],[13,"Union","","The Union stream type acts as a sum type (exclusive…",9,null],[13,"Stream","","The Stream type is used to define a new physical stream.",9,null],[4,"LogicalSplitItem","","A split item is either an async signal (outside…",null,null],[13,"Signals","","",10,null],[13,"Stream","","",10,null],[4,"PhysicalSplitItem","","A split item is either an async signal (outside…",null,null],[13,"Signals","","",11,null],[13,"Stream","","",11,null],[11,"new","","",12,[[["option",4],["nonnegative",6],["positivereal",6],["logicaltype",4],["direction",4],["synchronicity",4]]]],[11,"new_basic","","",12,[[["logicaltype",4]]]],[11,"data","","",12,[[],["logicaltype",4]]],[11,"direction","","Returns the direction of this stream.",12,[[],["direction",4]]],[11,"synchronicity","","Returns the synchronicity of this stream.",12,[[],["synchronicity",4]]],[11,"dimensionality","","Returns the dimensionality of this stream.",12,[[],["nonnegative",6]]],[11,"throughput","","Returns the throughput ratio of this stream.",12,[[],["positivereal",6]]],[11,"is_null","","Returns true if this stream is null i.e. it results in no…",12,[[]]],[11,"try_new","","Returns a new Group logical stream type. Returns an error…",13,[[],["result",6]]],[11,"iter","","Returns an iterator over the fields of the Group.",13,[[]]],[11,"try_new","","Returns a new Union logical stream type. Returns an error…",14,[[],["result",6]]],[11,"tag","","Returns the tag name and width of this union. Reference",14,[[],["option",4]]],[11,"iter","","Returns an iterator over the fields of the Union.",14,[[]]],[11,"try_new_bits","","Returns a new Bits stream type with the provided bit count…",9,[[["nonnegative",6]],["result",6]]],[11,"try_new_group","","Returns a new Group stream type from the provided iterator…",9,[[],["result",6]]],[11,"try_new_union","","",9,[[],["result",6]]],[11,"is_element_only","","Returns true if this logical stream consists of only…",9,[[]]],[11,"is_null","","Returns true if and only if this logical stream does not…",9,[[]]],[11,"compatible","","",9,[[["logicaltype",4]]]],[11,"split","","",9,[[],[["intoiter",3],["logicalsplititem",4]]]],[11,"physical","","",9,[[],[["physicalsplititem",4],["intoiter",3]]]],[11,"path_name","","",15,[[]]],[11,"logical_type","","Returns the LogicalType of this element. Contains no…",15,[[],["logicaltype",4]]],[11,"fields","","Return all fields in this element stream",15,[[],["fields",3]]],[11,"logical_type","","Returns the LogicalType of this element.",16,[[],["logicaltype",4]]],[11,"fields","","Returns all fields in these async signals.",16,[[],["fields",3]]],[11,"is_stream","","",10,[[]]],[11,"is_signals","","",10,[[]]],[11,"logical_type","","",10,[[],["logicaltype",4]]],[11,"fields","","",10,[[],["fields",3]]],[0,"physical","tydi","Physical streams.",null,null],[3,"Complexity","tydi::physical","Interface complexity level.",null,null],[3,"Fields","","",null,null],[3,"PhysicalStream","","Physical stream.",null,null],[3,"Signal","","",null,null],[3,"SignalList","","Signal list for the signals in a physical stream.",null,null],[4,"Origin","","",null,null],[13,"Source","","",17,null],[13,"Sink","","",17,null],[4,"Width","","",null,null],[13,"Scalar","","Non-vectorized single bit.",18,null],[13,"Vector","","Vectorized multiple bits.",18,null],[6,"BitCount","","Positive number of bits.",null,null],[11,"new","","Constructs a new Complexity with provided level. Returns…",19,[[],["result",6]]],[11,"new_major","","Constructs a new Complexity with provided level as major…",19,[[["nonnegative",6]]]],[11,"level","","Returns the level of this Complexity.",19,[[]]],[11,"major","","Returns the major version of this Complexity level.",19,[[],["nonnegative",6]]],[11,"new","","",20,[[],["result",6]]],[11,"iter","","",20,[[]]],[11,"keys","","",20,[[]]],[11,"values","","",20,[[]]],[11,"try_new","","",21,[[],["result",6]]],[11,"new","","Constructs a new PhysicalStream using provided arguments.…",21,[[["positive",6],["nonnegative",6]]]],[11,"element_fields","","Returns the element fields in this physical stream.",21,[[],["fields",3]]],[11,"element_lanes","","Returns the number of element lanes in this physical stream.",21,[[],["positive",6]]],[11,"dimensionality","","Returns the dimensionality of this physical stream.",21,[[],["nonnegative",6]]],[11,"complexity","","Returns the complexity of this physical stream.",21,[[],["complexity",3]]],[11,"user","","Returns the user fields in this physical stream.",21,[[],["fields",3]]],[11,"data_bit_count","","Returns the bit count of the data (element) fields in this…",21,[[],["nonnegative",6]]],[11,"last_bit_count","","Returns the number of last bits in this physical stream.…",21,[[],["nonnegative",6]]],[11,"stai_bit_count","","Returns the number of `stai` (start index) bits in this…",21,[[],["nonnegative",6]]],[11,"endi_bit_count","","Returns the number of `endi` (end index) bits in this…",21,[[],["nonnegative",6]]],[11,"strb_bit_count","","Returns the number of `strb` (strobe) bits in this…",21,[[],["nonnegative",6]]],[11,"user_bit_count","","Returns the bit count of the user fields in this physical…",21,[[],["nonnegative",6]]],[11,"signal_list","","Returns the signal list for this physical stream.",21,[[],["signallist",3]]],[11,"bit_count","","Returns the combined bit count of all signals in this…",21,[[],["nonnegative",6]]],[11,"opt_vec","","Returns a vector-style signal if the input width is…",22,[[["origin",4],["option",4],["nonnegative",6]],[["signal",3],["option",4]]]],[11,"vec","","Returns a vector-style signal.",22,[[["origin",4],["positive",6]],["signal",3]]],[11,"bit","","Returns a single bit non-vector style signal.",22,[[["origin",4]],["signal",3]]],[11,"reversed","","Returns whether the signal is reversed w.r.t. the source",22,[[]]],[11,"origin","","",22,[[],["origin",4]]],[11,"width","","",22,[[],["width",4]]],[11,"with_name","","",22,[[["string",3]],["signal",3]]],[11,"valid","","Returns the valid signal.",23,[[],["signal",3]]],[11,"ready","","Returns the ready signal.",23,[[],["signal",3]]],[11,"data","","Returns the `data` signal, if applicable for this…",23,[[],[["signal",3],["option",4]]]],[11,"last","","Returns the `last` signal, if applicable for this…",23,[[],[["signal",3],["option",4]]]],[11,"stai","","Returns the `stai` signal, if applicable for this…",23,[[],[["signal",3],["option",4]]]],[11,"endi","","Returns the `endi` signal, if applicable for this…",23,[[],[["signal",3],["option",4]]]],[11,"strb","","Returns the `strb` signal, if applicable for this…",23,[[],[["signal",3],["option",4]]]],[11,"user","","Returns the `user` signal, if applicable for this…",23,[[],[["signal",3],["option",4]]]],[11,"opt_bit_count","","Returns the bit count of all combined signals in this map.",23,[[],[["option",4],["nonnegative",6]]]],[11,"bit_count","","Returns the bit count of all combined signals in this map.",23,[[],["nonnegative",6]]],[0,"generator","tydi","",null,null],[0,"chisel","tydi::generator","Chisel back-end.",null,null],[3,"ChiselConfig","tydi::generator::chisel","Chisel back-end configuration parameters.",null,null],[3,"ChiselBackEnd","","A configurable VHDL back-end entry point.",null,null],[0,"common","tydi::generator","Common hardware representation.",null,null],[3,"Field","tydi::generator::common","A field for a `Record`.",null,null],[3,"Record","","Inner struct for `Type::Record`",null,null],[3,"Parameter","","A parameter for components.",null,null],[12,"name","","",24,null],[12,"typ","","",24,null],[3,"Port","","A port.",null,null],[3,"Component","","A component.",null,null],[3,"Package","","A library of components and types.",null,null],[12,"identifier","","The identifier.",25,null],[12,"components","","The components declared within the library.66",25,null],[3,"Project","","A project with libraries",null,null],[12,"identifier","","The name of the project.",26,null],[12,"libraries","","The libraries contained within the projects.",26,null],[4,"Type","","Hardware types.",null,null],[13,"Bit","","A single bit.",27,null],[13,"BitVec","","A vector of bits.",27,null],[12,"width","tydi::generator::common::Type","The width of the vector.",28,null],[13,"Record","tydi::generator::common","A record.",27,null],[4,"Mode","","Modes for ports.",null,null],[13,"In","","Input.",29,null],[13,"Out","","Output.",29,null],[0,"convert","","Generator methods and implementations for Tydi types.",null,null],[17,"CANON_SUFFIX","tydi::generator::common::convert","Suffix provided to the canonical representation of…",null,null],[8,"Typify","","Trait to create common representation types from things in…",null,null],[10,"canonical","","",30,[[],[["vec",3],["signal",3]]]],[11,"fancy","","",30,[[],[["option",4],["type",4]]]],[8,"Portify","","Trait to create common representation ports from things in…",null,null],[10,"canonical","","",31,[[],[["port",3],["vec",3]]]],[11,"fancy","","",31,[[],[["port",3],["vec",3]]]],[8,"Componentify","","Trait to create common representation components from…",null,null],[10,"canonical","","",32,[[["option",4]],["component",3]]],[11,"fancy","","",32,[[["option",4]],[["component",3],["option",4]]]],[8,"Packify","","Trait to create common representation of a package.",null,null],[10,"canonical","","",33,[[],["package",3]]],[10,"fancy","","",33,[[],["package",3]]],[8,"Projectify","","Trait to create common representation of a project.",null,null],[10,"canonical","","",34,[[],["project",3]]],[10,"fancy","","",34,[[],["project",3]]],[8,"ModeFor","","Trait that helps to determine the common representation…",null,null],[10,"mode_for","","Return the port mode of self, given a streamlet interface…",35,[[["mode",4]],["mode",4]]],[6,"TypeBundle","tydi::generator::common","Bundle of names and types. Useful to represent flattened…",null,null],[11,"new","","Construct a new record field.",36,[[["type",4]],["field",3]]],[11,"typ","","Returns the type of this field.",36,[[],["type",4]]],[11,"is_reversed","","Returns true if this field is reversed.",36,[[]]],[11,"new","","Construct a new record.",37,[[["field",3],["vec",3]],["record",3]]],[11,"new_empty","","Construct a new record without any fields.",37,[[],["record",3]]],[11,"new_empty_stream","","Construct a new record with a valid and ready bit.",37,[[],["record",3]]],[11,"insert_new_field","","Create a new field and add it to the record.",37,[[["type",4]]]],[11,"insert","","Add a field to the record.",37,[[["field",3]]]],[11,"has_reversed_field","","Returns true if the record contains a field that is…",37,[[]]],[11,"has_reversed","","Returns true if the record contains a field that is…",37,[[]]],[11,"fields","","Returns an iterable over the fields.",37,[[]]],[11,"is_empty","","Returns true if record contains no fields.",37,[[]]],[11,"append_name_nested","","Append a string to the name of this record, and any nested…",37,[[]]],[11,"bitvec","","Construct a bit vector type.",27,[[["nonnegative",6]],["type",4]]],[11,"record","","Construct a record type.",27,[[["field",3],["vec",3]],["type",4]]],[11,"flatten","","Flatten a type to a non-nested type bundle.",27,[[["vec",3],["string",3]],["typebundle",6]]],[11,"has_reversed","","",27,[[]]],[11,"new","","Create a new port.",38,[[["mode",4],["type",4]],["port",3]]],[11,"new_documented","","Create a new port with documentation.",38,[[["option",4],["mode",4],["type",4],["string",3]],["port",3]]],[11,"mode","","Return the port mode.",38,[[],["mode",4]]],[11,"typ","","Return the type of the port.",38,[[],["type",4]]],[11,"has_reversed","","Returns true if the port type contains reversed fields.",38,[[]]],[11,"with_doc","","Return this port with documentation added.",38,[[]]],[11,"set_doc","","Set the documentation of this port.",38,[[]]],[11,"new","","Create a new component.",39,[[["option",4],["vec",3],["port",3],["vec",3],["parameter",3],["string",3]],["component",3]]],[11,"ports","","Return a reference to the ports of this component.",39,[[],["vec",3]]],[11,"parameters","","Return a reference to the parameters of this component.",39,[[],["vec",3]]],[11,"with_doc","","Return this component with documentation added.",39,[[]]],[11,"set_doc","","Set the documentation of this component.",39,[[]]],[0,"vhdl","tydi::generator","VHDL back-end.",null,null],[3,"VHDLConfig","tydi::generator::vhdl","VHDL back-end configuration parameters.",null,null],[3,"VHDLBackEnd","","A configurable VHDL back-end entry point.",null,null],[4,"AbstractionLevel","","Abstraction levels",null,null],[13,"Canonical","","",40,null],[13,"Fancy","","",40,null],[8,"Declare","","Generate trait for generic VHDL declarations.",null,null],[10,"declare","","Generate a VHDL declaration from self.",41,[[],[["result",6],["string",3]]]],[8,"DeclareType","","Generate trait for VHDL type declarations.",null,null],[10,"declare","","Generate a VHDL declaration from self.",42,[[],[["result",6],["string",3]]]],[8,"DeclareLibrary","","Generate trait for VHDL package declarations.",null,null],[10,"declare","","Generate a VHDL declaration from self.",43,[[["abstractionlevel",4]],[["result",6],["string",3]]]],[8,"VHDLIdentifier","","Generate trait for VHDL identifiers.",null,null],[10,"vhdl_identifier","","Generate a VHDL identifier from self.",44,[[],[["result",6],["string",3]]]],[8,"Analyze","","Analyze trait for VHDL objects.",null,null],[10,"list_record_types","","List all record types used.",45,[[],[["vec",3],["type",4]]]],[11,"abstraction","","",46,[[],["abstractionlevel",4]]],[11,"config","","",47,[[],["vhdlconfig",3]]],[8,"GenerateProject","tydi::generator","Trait to generate back-end specific source files from the…",null,null],[10,"generate","","Generate source files from a [common::Project] and save…",48,[[["project",3]],["result",6]]],[0,"parser","tydi","Parser methods and implementations for Tydi types.",null,null],[0,"nom","tydi::parser","Nom-based parsers for Streamlet Definition Files.",null,null],[5,"name","tydi::parser::nom","",null,[[],[["iresult",6],["verboseerror",3],["name",3]]]],[5,"comment_delimited","","Delimited comments, not meant for doc strings, so if it…",null,[[],[["iresult",6],["verboseerror",3]]]],[5,"take_until_newline_or_eof","","",null,[[],[["iresult",6],["verboseerror",3]]]],[5,"comment_line","","Line or eof delimited comment, not meant for doc string,…",null,[[],[["iresult",6],["verboseerror",3]]]],[5,"comment_doc","","Line comment meant for doc strings.",null,[[],[["iresult",6],["verboseerror",3]]]],[5,"comment","","",null,[[],[["iresult",6],["verboseerror",3]]]],[5,"comment_doc_block","","",null,[[],[["verboseerror",3],["iresult",6],["vec",3]]]],[5,"doc","","",null,[[],[["verboseerror",3],["option",4],["iresult",6]]]],[5,"bool","","",null,[[],[["iresult",6],["verboseerror",3]]]],[5,"null","","",null,[[],[["verboseerror",3],["logicaltype",4],["iresult",6]]]],[5,"bits","","",null,[[],[["verboseerror",3],["logicaltype",4],["iresult",6]]]],[5,"logical_stream_type","","",null,[[],[["verboseerror",3],["logicaltype",4],["iresult",6]]]],[5,"group","","",null,[[],[["verboseerror",3],["logicaltype",4],["iresult",6]]]],[5,"union","","",null,[[],[["verboseerror",3],["logicaltype",4],["iresult",6]]]],[5,"complexity","","",null,[[],[["iresult",6],["complexity",3],["verboseerror",3]]]],[5,"synchronicity","","",null,[[],[["iresult",6],["verboseerror",3],["synchronicity",4]]]],[5,"direction","","",null,[[],[["verboseerror",3],["iresult",6],["direction",4]]]],[5,"stream","","",null,[[],[["verboseerror",3],["logicaltype",4],["iresult",6]]]],[5,"mode","","",null,[[],[["iresult",6],["mode",4],["verboseerror",3]]]],[5,"interface","","",null,[[],[["verboseerror",3],["interface",3],["iresult",6]]]],[5,"streamlet","","",null,[[],[["streamlet",3],["iresult",6],["verboseerror",3]]]],[5,"list_of_streamlets","","",null,[[],[["verboseerror",3],["vec",3],["iresult",6]]]],[6,"Result","tydi","Result type with [`Error`] variants.",null,null],[6,"Positive","","Positive integer.",null,null],[6,"NonNegative","","Non-negative integer.",null,null],[6,"PositiveReal","","Positive real.",null,null],[8,"Document","","Trait for things that have documentation.",null,null],[10,"doc","","Return optionally existing user-written documentation of…",49,[[],[["string",3],["option",4]]]],[8,"Identify","","Trait for things that have names.",null,null],[10,"identifier","","",50,[[]]],[8,"Reverse","","In-place reverse.",null,null],[10,"reverse","","Reverse in-place.",51,[[]]],[8,"Reversed","","Construct reversed items.",null,null],[10,"reversed","","Returns a new reversed instance.",52,[[]]],[11,"new","","",53,[[],["result",6]]],[11,"get","","",53,[[]]],[11,"try_new","","Constructs a new name wrapper. Returns an error when the…",54,[[],["result",6]]],[11,"new","","",55,[[]]],[11,"try_new","","",55,[[],["result",6]]],[11,"is_empty","","Returns true if this PathName is empty (∅).",55,[[]]],[11,"push","","",55,[[]]],[11,"len","","",55,[[]]],[11,"last","","",55,[[],[["option",4],["name",3]]]],[11,"parent","","",55,[[],[["option",4],["pathname",3]]]],[14,"cat","","Concatenate stuff using format with an underscore in…",null,null],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"equivalent","","",53,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"to_string","","",54,[[],["string",3]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"equivalent","","",54,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"to_string","","",55,[[],["string",3]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"equivalent","","",55,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","tydi::design::library","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","tydi::design::project","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","tydi::design::streamlet","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","tydi::logical","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"equivalent","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"equivalent","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","tydi::physical","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"equivalent","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","tydi::generator::chisel","",57,[[]]],[11,"into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","tydi::generator::common","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","tydi::generator::vhdl","",46,[[]]],[11,"into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"reverse","tydi::logical","Reverse this direction.",7,[[]]],[11,"reverse","","Reverse the direction of this stream.",12,[[]]],[11,"reversed","tydi::generator::common","",36,[[]]],[11,"reversed","","",29,[[]]],[11,"identifier","tydi::design::library","",2,[[]]],[11,"identifier","tydi::design::project","",3,[[]]],[11,"identifier","tydi::design::streamlet","",5,[[]]],[11,"identifier","","",6,[[]]],[11,"identifier","tydi::physical","",22,[[]]],[11,"identifier","tydi::generator::common","",36,[[]]],[11,"identifier","","",37,[[]]],[11,"identifier","","",38,[[]]],[11,"identifier","","",39,[[]]],[11,"doc","tydi::design::streamlet","",5,[[],[["string",3],["option",4]]]],[11,"doc","","",6,[[],[["string",3],["option",4]]]],[11,"doc","tydi::generator::common","",38,[[],[["string",3],["option",4]]]],[11,"doc","","",39,[[],[["string",3],["option",4]]]],[11,"canonical","tydi::logical","",9,[[],[["vec",3],["signal",3]]]],[11,"fancy","","",9,[[],[["option",4],["type",4]]]],[11,"canonical","","",13,[[],[["vec",3],["signal",3]]]],[11,"fancy","","",13,[[],[["option",4],["type",4]]]],[11,"canonical","","",14,[[],[["vec",3],["signal",3]]]],[11,"fancy","","",14,[[],[["option",4],["type",4]]]],[11,"canonical","","",12,[[],[["vec",3],["signal",3]]]],[11,"fancy","","",12,[[],[["option",4],["type",4]]]],[11,"canonical","tydi::design::streamlet","",5,[[],[["port",3],["vec",3]]]],[11,"fancy","","",5,[[],[["port",3],["vec",3]]]],[11,"canonical","","",6,[[["option",4]],["component",3]]],[11,"fancy","","",6,[[["option",4]],[["component",3],["option",4]]]],[11,"canonical","tydi::design::library","",2,[[],["package",3]]],[11,"fancy","","",2,[[],["package",3]]],[11,"canonical","tydi::design::project","",3,[[],["project",3]]],[11,"fancy","","",3,[[],["project",3]]],[11,"mode_for","tydi::physical","Return the common representation port mode for this signal…",17,[[["mode",4]],["mode",4]]],[11,"declare","tydi::generator::common","",38,[[],[["result",6],["string",3]]]],[11,"declare","","",39,[[],[["result",6],["string",3]]]],[11,"declare","","",25,[[],[["result",6],["string",3]]]],[11,"declare","","",37,[[],[["result",6],["string",3]]]],[11,"declare","","",27,[[],[["result",6],["string",3]]]],[11,"vhdl_identifier","","",29,[[],[["result",6],["string",3]]]],[11,"vhdl_identifier","","",27,[[],[["result",6],["string",3]]]],[11,"vhdl_identifier","","",37,[[],[["result",6],["string",3]]]],[11,"vhdl_identifier","","",38,[[],[["result",6],["string",3]]]],[11,"list_record_types","","",27,[[],[["vec",3],["type",4]]]],[11,"list_record_types","","",39,[[],[["vec",3],["type",4]]]],[11,"generate","tydi::generator::chisel","",58,[[["project",3]],["result",6]]],[11,"generate","tydi::generator::vhdl","",47,[[["project",3]],["result",6]]],[11,"as_ref","tydi","",55,[[]]],[11,"from","","",0,[[["box",3],["error",8]]]],[11,"from","","",0,[[["error",3]]]],[11,"from","","",0,[[["setloggererror",3]]]],[11,"from","tydi::logical","Wraps this stream in a [`LogicalType`].",9,[[["stream",3]]]],[11,"from","","Wraps this group in a [`LogicalType`].",9,[[["group",3]]]],[11,"from","","Wraps this union in a [`LogicalType`].",9,[[["union",3]]]],[11,"from","","",9,[[["positive",6]]]],[11,"from","tydi::physical","",21,[[["elementstream",3]],["physicalstream",3]]],[11,"from","","Convert a NonNegative into complexity with the NonNegative…",19,[[["nonnegative",6]]]],[11,"from","","",23,[[["physicalstream",3]],["signallist",3]]],[11,"from","","",23,[[["physicalstream",3]],["signallist",3]]],[11,"from","tydi::generator::common","",27,[[["width",4]]]],[11,"from","","",29,[[["mode",4]]]],[11,"from","tydi::generator::vhdl","",47,[[["vhdlconfig",3]]]],[11,"from","tydi","",55,[[["name",3]]]],[11,"clone","tydi::design::library","",2,[[],["library",3]]],[11,"clone","tydi::design::project","",3,[[],["project",3]]],[11,"clone","tydi::design::streamlet","",4,[[],["mode",4]]],[11,"clone","","",5,[[],["interface",3]]],[11,"clone","","",6,[[],["streamlet",3]]],[11,"clone","tydi","",0,[[],["error",4]]],[11,"clone","tydi::logical","",7,[[],["direction",4]]],[11,"clone","","",8,[[],["synchronicity",4]]],[11,"clone","","",12,[[],["stream",3]]],[11,"clone","","",13,[[],["group",3]]],[11,"clone","","",14,[[],["union",3]]],[11,"clone","","",9,[[],["logicaltype",4]]],[11,"clone","","",15,[[],["elementstream",3]]],[11,"clone","","",16,[[],["signals",3]]],[11,"clone","","",10,[[],["logicalsplititem",4]]],[11,"clone","","",11,[[],["physicalsplititem",4]]],[11,"clone","tydi::physical","",19,[[],["complexity",3]]],[11,"clone","","",20,[[],["fields",3]]],[11,"clone","","",21,[[],["physicalstream",3]]],[11,"clone","","",17,[[],["origin",4]]],[11,"clone","","",18,[[],["width",4]]],[11,"clone","","",22,[[],["signal",3]]],[11,"clone","","",23,[[],["signallist",3]]],[11,"clone","tydi::generator::common","",36,[[],["field",3]]],[11,"clone","","",37,[[],["record",3]]],[11,"clone","","",27,[[],["type",4]]],[11,"clone","","",24,[[],["parameter",3]]],[11,"clone","","",29,[[],["mode",4]]],[11,"clone","","",38,[[],["port",3]]],[11,"clone","","",39,[[],["component",3]]],[11,"clone","tydi::generator::vhdl","",40,[[],["abstractionlevel",4]]],[11,"clone","tydi","",53,[[],["nonzeroreal",3]]],[11,"clone","","",54,[[],["name",3]]],[11,"clone","","",55,[[],["pathname",3]]],[11,"default","","",1,[[]]],[11,"default","tydi::logical","",7,[[]]],[11,"default","","",8,[[]]],[11,"default","tydi::physical","",19,[[]]],[11,"default","tydi::generator::chisel","",57,[[]]],[11,"default","","",58,[[],["chiselbackend",3]]],[11,"default","tydi::generator::vhdl","",40,[[]]],[11,"default","","",46,[[]]],[11,"default","","",47,[[],["vhdlbackend",3]]],[11,"cmp","tydi::physical","A complexity number is higher than another when the…",19,[[["complexity",3]],["ordering",4]]],[11,"cmp","tydi","",53,[[["nonzeroreal",3]],["ordering",4]]],[11,"cmp","","",54,[[["name",3]],["ordering",4]]],[11,"cmp","","",55,[[["pathname",3]],["ordering",4]]],[11,"eq","tydi::design::library","",2,[[["library",3]]]],[11,"ne","","",2,[[["library",3]]]],[11,"eq","tydi::design::project","",3,[[["project",3]]]],[11,"ne","","",3,[[["project",3]]]],[11,"eq","tydi::design::streamlet","",4,[[["mode",4]]]],[11,"eq","","",5,[[["interface",3]]]],[11,"ne","","",5,[[["interface",3]]]],[11,"eq","","",6,[[["streamlet",3]]]],[11,"ne","","",6,[[["streamlet",3]]]],[11,"eq","tydi","",0,[[["error",4]]]],[11,"ne","","",0,[[["error",4]]]],[11,"eq","tydi::logical","",7,[[["direction",4]]]],[11,"eq","","",8,[[["synchronicity",4]]]],[11,"eq","","",12,[[["stream",3]]]],[11,"ne","","",12,[[["stream",3]]]],[11,"eq","","",13,[[["group",3]]]],[11,"ne","","",13,[[["group",3]]]],[11,"eq","","",14,[[["union",3]]]],[11,"ne","","",14,[[["union",3]]]],[11,"eq","","",9,[[["logicaltype",4]]]],[11,"ne","","",9,[[["logicaltype",4]]]],[11,"eq","","",15,[[["elementstream",3]]]],[11,"ne","","",15,[[["elementstream",3]]]],[11,"eq","","",16,[[["signals",3]]]],[11,"ne","","",16,[[["signals",3]]]],[11,"eq","","",10,[[["logicalsplititem",4]]]],[11,"ne","","",10,[[["logicalsplititem",4]]]],[11,"eq","","",11,[[["physicalsplititem",4]]]],[11,"ne","","",11,[[["physicalsplititem",4]]]],[11,"eq","tydi::physical","A complexity number is higher than another when the…",19,[[]]],[11,"eq","","",20,[[["fields",3]]]],[11,"ne","","",20,[[["fields",3]]]],[11,"eq","","",21,[[["physicalstream",3]]]],[11,"ne","","",21,[[["physicalstream",3]]]],[11,"eq","","",17,[[["origin",4]]]],[11,"eq","","",18,[[["width",4]]]],[11,"ne","","",18,[[["width",4]]]],[11,"eq","","",22,[[["signal",3]]]],[11,"ne","","",22,[[["signal",3]]]],[11,"eq","","",23,[[["signallist",3]]]],[11,"ne","","",23,[[["signallist",3]]]],[11,"eq","tydi::generator::common","",36,[[["field",3]]]],[11,"ne","","",36,[[["field",3]]]],[11,"eq","","",37,[[["record",3]]]],[11,"ne","","",37,[[["record",3]]]],[11,"eq","","",27,[[["type",4]]]],[11,"ne","","",27,[[["type",4]]]],[11,"eq","","",29,[[["mode",4]]]],[11,"eq","","",38,[[["port",3]]]],[11,"ne","","",38,[[["port",3]]]],[11,"eq","tydi","",53,[[["nonzeroreal",3]]]],[11,"ne","","",53,[[["nonzeroreal",3]]]],[11,"eq","","",54,[[["name",3]]]],[11,"ne","","",54,[[["name",3]]]],[11,"eq","","",54,[[["string",3]]]],[11,"eq","","",54,[[]]],[11,"eq","","",55,[[["pathname",3]]]],[11,"ne","","",55,[[["pathname",3]]]],[11,"partial_cmp","tydi::physical","",19,[[["complexity",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","tydi","",53,[[["nonzeroreal",3]],[["ordering",4],["option",4]]]],[11,"lt","","",53,[[["nonzeroreal",3]]]],[11,"le","","",53,[[["nonzeroreal",3]]]],[11,"gt","","",53,[[["nonzeroreal",3]]]],[11,"ge","","",53,[[["nonzeroreal",3]]]],[11,"partial_cmp","","",54,[[["name",3]],[["ordering",4],["option",4]]]],[11,"lt","","",54,[[["name",3]]]],[11,"le","","",54,[[["name",3]]]],[11,"gt","","",54,[[["name",3]]]],[11,"ge","","",54,[[["name",3]]]],[11,"partial_cmp","","",55,[[["pathname",3]],[["ordering",4],["option",4]]]],[11,"lt","","",55,[[["pathname",3]]]],[11,"le","","",55,[[["pathname",3]]]],[11,"gt","","",55,[[["pathname",3]]]],[11,"ge","","",55,[[["pathname",3]]]],[11,"deref","","",54,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","tydi::design::library","",2,[[["formatter",3]],["result",6]]],[11,"fmt","tydi::design::project","",3,[[["formatter",3]],["result",6]]],[11,"fmt","tydi::design::streamlet","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","tydi","",0,[[["formatter",3]],["result",6]]],[11,"fmt","tydi::logical","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","tydi::physical","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","tydi::generator::common","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","tydi::generator::vhdl","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","tydi","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","Display the error variants.",0,[[["formatter",3]],["result",6]]],[11,"fmt","tydi::physical","Display a complexity level as a version number. The levels…",19,[[["formatter",3]],["result",6]]],[11,"fmt","tydi","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"mul","","",53,[[["nonzeroreal",3]]]],[11,"hash","","",53,[[]]],[11,"hash","","",54,[[]]],[11,"hash","","",55,[[]]],[11,"from_iter","","",1,[[["intoiterator",8]]]],[11,"from_iter","","",55,[[["intoiterator",8]]]],[11,"try_from","tydi::logical","Returns a new Bits stream type with the provided bit count…",9,[[["nonnegative",6]],["result",6]]],[11,"try_from","tydi::physical","Try to convert a vector of NonNegative into a complexity.…",19,[[["vec",3],["nonnegative",6]],["result",6]]],[11,"try_from","tydi","",54,[[],["result",6]]],[11,"try_from","","",54,[[["string",3]],["result",6]]],[11,"try_from","","",55,[[["string",3]],["result",6]]],[11,"try_from","","",55,[[],["result",6]]],[11,"from_str","tydi::design::streamlet","",4,[[],["result",6]]],[11,"from_str","tydi::logical","",7,[[],["result",6]]],[11,"from_str","","",8,[[],["result",6]]],[11,"from_str","tydi::physical","",19,[[],["result",6]]],[11,"from_str","tydi::generator::vhdl","",40,[[],["result",6]]],[11,"from_str","tydi","",54,[[],["result",6]]],[11,"enabled","","",56,[[["metadata",3]]]],[11,"log","","",56,[[["record",3]]]],[11,"flush","","",56,[[]]],[11,"clap","tydi::generator::vhdl","",40,[[],["app",3]]],[11,"from_clap","","",40,[[["argmatches",3]]]],[11,"clap","","",46,[[],["app",3]]],[11,"from_clap","","",46,[[["argmatches",3]]]],[11,"augment_clap","","",40,[[["app",3]],["app",3]]],[11,"from_subcommand","","",40,[[],["option",4]]],[11,"is_subcommand","","",40,[[]]],[11,"augment_clap","","",46,[[["app",3]],["app",3]]],[11,"is_subcommand","","",46,[[]]]],"p":[[4,"Error"],[3,"UniquelyNamedBuilder"],[3,"Library"],[3,"Project"],[4,"Mode"],[3,"Interface"],[3,"Streamlet"],[4,"Direction"],[4,"Synchronicity"],[4,"LogicalType"],[4,"LogicalSplitItem"],[4,"PhysicalSplitItem"],[3,"Stream"],[3,"Group"],[3,"Union"],[3,"ElementStream"],[3,"Signals"],[4,"Origin"],[4,"Width"],[3,"Complexity"],[3,"Fields"],[3,"PhysicalStream"],[3,"Signal"],[3,"SignalList"],[3,"Parameter"],[3,"Package"],[3,"Project"],[4,"Type"],[13,"BitVec"],[4,"Mode"],[8,"Typify"],[8,"Portify"],[8,"Componentify"],[8,"Packify"],[8,"Projectify"],[8,"ModeFor"],[3,"Field"],[3,"Record"],[3,"Port"],[3,"Component"],[4,"AbstractionLevel"],[8,"Declare"],[8,"DeclareType"],[8,"DeclareLibrary"],[8,"VHDLIdentifier"],[8,"Analyze"],[3,"VHDLConfig"],[3,"VHDLBackEnd"],[8,"GenerateProject"],[8,"Document"],[8,"Identify"],[8,"Reverse"],[8,"Reversed"],[3,"NonZeroReal"],[3,"Name"],[3,"PathName"],[3,"Logger"],[3,"ChiselConfig"],[3,"ChiselBackEnd"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);