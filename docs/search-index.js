var searchIndex = JSON.parse('{\
"tydi":{"doc":"Tydi is an open specification for complex data structures â€¦","t":[13,13,8,4,13,8,13,13,13,3,3,6,3,13,3,6,6,6,8,8,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,0,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,0,0,10,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,3,13,4,13,3,3,3,3,3,13,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,17,8,8,8,8,8,8,10,10,10,10,10,10,10,11,11,11,10,4,8,13,8,8,8,13,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,13,13,4,3,13,13,13,3,13,4,4,13,4,13,3,13,13,3,13,13,13,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,3,3,4,3,13,3,3,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["BackEndError","CLIError","Document","Error","FileIOError","Identify","InterfaceError","InvalidArgument","InvalidTarget","Logger","Name","NonNegative","NonZeroReal","ParsingError","PathName","Positive","PositiveReal","Result","Reverse","Reversed","UnexpectedDuplicate","UniquelyNamedBuilder","UnknownError","add_item","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","deref","design","doc","enabled","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","finish","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","generator","get","hash","hash","hash","identifier","into","into","into","into","into","into","is_empty","last","len","log","logical","mul","ne","ne","ne","ne","new","new","new","parent","parser","partial_cmp","partial_cmp","partial_cmp","physical","push","reverse","reversed","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","type_id","type_id","type_id","type_id","type_id","type_id","with_item","with_items","0","0","0","0","0","0","0","library","project","streamlet","Library","borrow","borrow_mut","canonical","clone","clone_into","eq","fancy","fmt","from","from_builder","from_file","identifier","into","ne","streamlets","to_owned","try_from","try_into","type_id","Project","borrow","borrow_mut","canonical","clone","clone_into","eq","fancy","fmt","from","from_builder","identifier","into","libraries","ne","to_owned","try_from","try_into","type_id","In","Interface","Mode","Out","Streamlet","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","canonical","canonical","clone","clone","clone","clone_into","clone_into","clone_into","doc","doc","eq","eq","eq","fancy","fancy","fmt","fmt","fmt","from","from","from","from_builder","from_str","identifier","identifier","interfaces","into","into","into","mode","ne","ne","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_new","typ","type_id","type_id","type_id","with_doc","with_doc","GenerateProject","chisel","common","generate","vhdl","ChiselBackEnd","ChiselConfig","borrow","borrow","borrow_mut","borrow_mut","default","default","from","from","generate","into","into","try_from","try_from","try_into","try_into","type_id","type_id","Bit","BitVec","Component","Field","In","Mode","Out","Package","Parameter","Port","Project","Record","Record","Type","TypeBundle","append_name_nested","bitvec","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","convert","declare","declare","declare","declare","declare","doc","doc","eq","eq","eq","eq","eq","fields","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_reversed","has_reversed","has_reversed","has_reversed_field","identifier","identifier","identifier","identifier","identifier","identifier","insert","insert_new_field","into","into","into","into","into","into","into","into","into","is_empty","is_reversed","libraries","list_record_types","list_record_types","mode","name","ne","ne","ne","ne","new","new","new","new","new_documented","new_empty","new_empty_stream","parameters","ports","record","reversed","reversed","set_doc","set_doc","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vhdl_identifier","vhdl_identifier","vhdl_identifier","vhdl_identifier","with_doc","with_doc","0","width","CANON_SUFFIX","Componentify","ModeFor","Packify","Portify","Projectify","Typify","canonical","canonical","canonical","canonical","canonical","fancy","fancy","fancy","fancy","fancy","mode_for","AbstractionLevel","Analyze","Canonical","Declare","DeclareLibrary","DeclareType","Fancy","VHDLBackEnd","VHDLConfig","VHDLIdentifier","abstraction","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clap","clap","clone","clone_into","config","declare","declare","declare","default","default","default","fmt","fmt","from","from","from","from","from_clap","from_clap","from_str","generate","into","into","into","list_record_types","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vhdl_identifier","Bits","Desync","Direction","ElementStream","FlatDesync","Flatten","Forward","Group","Group","LogicalSplitItem","LogicalType","Null","PhysicalSplitItem","Reverse","Signals","Signals","Signals","Stream","Stream","Stream","Stream","Sync","Synchronicity","Union","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonical","canonical","canonical","canonical","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compatible","data","default","default","dimensionality","direction","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","fancy","fancy","fancy","fancy","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","into","into","into","into","into","into","into","into","into","into","is_element_only","is_null","is_null","is_signals","is_stream","iter","iter","logical_type","logical_type","logical_type","ne","ne","ne","ne","ne","ne","ne","ne","new","new_basic","path_name","physical","reverse","reverse","split","synchronicity","tag","throughput","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new_bits","try_new_group","try_new_union","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","nom","bits","bool","comment","comment_delimited","comment_doc","comment_doc_block","comment_line","complexity","direction","doc","group","interface","list_of_streamlets","logical_stream_type","mode","name","null","stream","streamlet","synchronicity","take_until_newline_or_eof","union","BitCount","Complexity","Fields","Origin","PhysicalStream","Scalar","Signal","SignalList","Sink","Source","Vector","Width","bit","bit_count","bit_count","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","complexity","data","data_bit_count","default","dimensionality","element_fields","element_lanes","endi","endi_bit_count","eq","eq","eq","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_str","identifier","into","into","into","into","into","into","into","iter","keys","last","last_bit_count","level","major","mode_for","ne","ne","ne","ne","ne","new","new","new","new_major","opt_bit_count","opt_vec","origin","partial_cmp","ready","reversed","signal_list","stai","stai_bit_count","strb","strb_bit_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user","user","user_bit_count","valid","values","vec","width","with_name","0"],"q":["tydi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::Error","","","","","","","tydi::design","","","tydi::design::library","","","","","","","","","","","","","","","","","","","","tydi::design::project","","","","","","","","","","","","","","","","","","","tydi::design::streamlet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::generator","","","","","tydi::generator::chisel","","","","","","","","","","","","","","","","","","","tydi::generator::commontydi::generator::common::Type","","tydi::generator::common::convert","","","","","","","","","","","","","","","","","","tydi::generator::vhdl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::logicaltydi::logical::LogicalSplitItem","","tydi::logical::LogicalType","","","","tydi::logical::PhysicalSplitItem","","tydi::parser","tydi::parser::nom","","","","","","","","","","","","","","","","","","","","","","tydi::physical","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::physical::Width"],"d":["Back-end error.","Generic CLI error.","Trait for things that have documentation.","Error variants used in this crate.","File I/O error.","Trait for things that have names.","Forbidden interface name.","Indicates an invalid argument is provided.","Invalid target.","Simple logger for Tydi.","Type-safe wrapper for valid names.","Non-negative integer.","","Parsing error.","Type-safe path for names.","Positive integer.","Positive real.","Result type with <code>Error</code> variants.","In-place reverse.","Construct reversed items.","Indicates an unexpected duplicate is provided.","A builder for lists of things requiring unique names.","Unknown error.","Add an item to the builder.","","","","","","","","","","","","","","Concatenate stuff using format with an underscore in â€¦","","","","","","","","","","","","","","Constructs that are used to generate hardware designs, â€¦","Return optionally existing user-written documentation of â€¦","","","","","","","","","","","Finalize the builder, checking whether all names are â€¦","","","Display the error variants.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this PathName is empty (âˆ…).","","","","Logical streams.","","","","","","Construct a new builder.","","","","Parser methods and implementations for Tydi types.","","","","Physical streams.","","Reverse in-place.","Returns a new reversed instance.","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new name wrapper. Returns an error when the â€¦","","","","","","","","Return this builder with the item appended.","Return this builder with the items appended.","","","","","","","","This module contains the Library structure, used to group â€¦","","This module contains the Streamlet structure.","A collection of Streamlets.","","","","","","","","","Returns the argument unchanged.","Construct a Library from a UniquelyNamedBuilder with â€¦","Construct a Library from a Streamlet Definition File.","","Calls <code>U::from(self)</code>.","","","","","","","A collection of Streamlets.","","","","","","","","","Returns the argument unchanged.","Construct a Project from a UniquelyNamedBuilder with â€¦","","Calls <code>U::from(self)</code>.","","","","","","","The interface is an input of the streamlet.","A Streamlet interface.","Streamlet interface mode.","The interface is an output of the streamlet.","Streamlet interface definition.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a new streamlet from an interface builder that â€¦","","","","Return an iterator over the interfaces of this Streamlet.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the Mode of the interface.","","","","","","","","","","","","Try to construct a new interface.","Return the [LogicalStreamType] of the interface.","","","","","Return this streamlet with documentation added.","Trait to generate back-end specific source files from the â€¦","Chisel back-end.","Common hardware representation.","Generate source files from a common::Project and save them â€¦","VHDL back-end.","A configurable VHDL back-end entry point.","Chisel back-end configuration parameters.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","A single bit.","A vector of bits.","A component.","A field for a <code>Record</code>.","Input.","Modes for ports.","Output.","A library of components and types.","A parameter for components.","A port.","A project with libraries","Inner struct for <code>Type::Record</code>","A record.","Hardware types.","Bundle of names and types. Useful to represent flattened â€¦","Append a string to the name of this record, and any nested â€¦","Construct a bit vector type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The components declared within the library.66","Generator methods and implementations for Tydi types.","","","","","","","","","","","","","Returns an iterable over the fields.","Flatten a type to a non-nested type bundle.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns true if the record contains a field that is â€¦","","Returns true if the port type contains reversed fields.","Returns true if the record contains a field that is â€¦","","","","","The identifier.","The name of the project.","Add a field to the record.","Create a new field and add it to the record.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if record contains no fields.","Returns true if this field is reversed.","The libraries contained within the projects.","","","Return the port mode.","","","","","","Construct a new record field.","Construct a new record.","Create a new port.","Create a new component.","Create a new port with documentation.","Construct a new record without any fields.","Construct a new record with a valid and ready bit.","Return a reference to the parameters of this component.","Return a reference to the ports of this component.","Construct a record type.","","","Set the documentation of this port.","Set the documentation of this component.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the type of this field.","Return the type of the port.","","","","","","","","","","","","","","","Return this port with documentation added.","Return this component with documentation added.","","The width of the vector.","Suffix provided to the canonical representation of â€¦","Trait to create common representation components from â€¦","Trait that helps to determine the common representation â€¦","Trait to create common representation of a package.","Trait to create common representation ports from things in â€¦","Trait to create common representation of a project.","Trait to create common representation types from things in â€¦","","","","","","","","","","","Return the port mode of self, given a streamlet interface â€¦","Abstraction levels","Analyze trait for VHDL objects.","","Generate trait for generic VHDL declarations.","Generate trait for VHDL package declarations.","Generate trait for VHDL type declarations.","","A configurable VHDL back-end entry point.","VHDL back-end configuration parameters.","Generate trait for VHDL identifiers.","","","","","","","","","","","","","Generate a VHDL declaration from self.","Generate a VHDL declaration from self.","Generate a VHDL declaration from self.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","List all record types used.","","","","","","","","","","","Generate a VHDL identifier from self.","The Bits stream type, defined as <code>Bits(b)</code>, indicates the â€¦","Desync may be used if the relation between the elements in â€¦","Direction of a stream.","An element stream with a path name and LogicalType. â€¦","FlatDesync, finally, does the same thing as Desync, but â€¦","Indicating that there is a one-to-one relation between the â€¦","Forward indicates that the child stream flows in the same â€¦","The Group stream type acts as a product type (composition).","The Group stream type acts as a product type (composition).","A split item is either an async signal (outside â€¦","Types of logical streams.","The Null stream type indicates the transferrence of â€¦","A split item is either an async signal (outside â€¦","Reverse indicates that the child stream acts as a response â€¦","","","","The stream-manipulating logical stream type.","The Stream type is used to define a new physical stream.","","","Indicating that there is a one-to-one relation between the â€¦","The synchronicity of the elements in the child stream with â€¦","Reference","The Union stream type acts as a sum type (exclusive â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the dimensionality of this stream.","Returns the direction of this stream.","","","","","","","","","","","","","","","","","Return all fields in this element stream","Returns all fields in these async signals.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Wraps this union in a <code>LogicalType</code>.","Wraps this group in a <code>LogicalType</code>.","Wraps this stream in a <code>LogicalType</code>.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this logical stream consists of only â€¦","Returns true if this stream is null i.e. it results in no â€¦","Returns true if and only if this logical stream does not â€¦","","","Returns an iterator over the fields of the Group.","Returns an iterator over the fields of the Union.","Returns the LogicalType of this element. Contains no â€¦","Returns the LogicalType of this element.","","","","","","","","","","","","","","Reverse this direction.","Reverse the direction of this stream.","","Returns the synchronicity of this stream.","Returns the tag name and width of this union. Reference","Returns the throughput ratio of this stream.","","","","","","","","","","","","","","","","","Returns a new Bits stream type with the provided bit count â€¦","","","","","","","","","","","","","","","Returns a new Group logical stream type. Returns an error â€¦","Returns a new Union logical stream type. Returns an error â€¦","Returns a new Bits stream type with the provided bit count â€¦","Returns a new Group stream type from the provided iterator â€¦","","","","","","","","","","","","","","","","","","","","Nom-based parsers for Streamlet Definition Files.","","","","Delimited comments, not meant for doc strings, so if it â€¦","Line comment meant for doc strings.","","Line or eof delimited comment, not meant for doc string, â€¦","","","","","","","","","","","","","","","","Positive number of bits.","Interface complexity level.","","","Physical stream.","Non-vectorized single bit.","","Signal list for the signals in a physical stream.","","","Vectorized multiple bits.","","Returns a single bit non-vector style signal.","Returns the combined bit count of all signals in this â€¦","Returns the bit count of all combined signals in this map.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A complexity number is higher than another when the â€¦","Returns the complexity of this physical stream.","Returns the <code>data</code> signal, if applicable for this â€¦","Returns the bit count of the data (element) fields in this â€¦","","Returns the dimensionality of this physical stream.","Returns the element fields in this physical stream.","Returns the number of element lanes in this physical â€¦","Returns the <code>endi</code> signal, if applicable for this â€¦","Returns the number of <code>endi</code> (end index) bits in this â€¦","A complexity number is higher than another when the â€¦","","","","","","","","Display a complexity level as a version number. The levels â€¦","","","","","","","","Convert a NonNegative into complexity with the NonNegative â€¦","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the <code>last</code> signal, if applicable for this â€¦","Returns the number of last bits in this physical stream. â€¦","Returns the level of this Complexity.","Returns the major version of this Complexity level.","Return the common representation port mode for this signal â€¦","","","","","","Constructs a new Complexity with provided level. Returns â€¦","","Constructs a new PhysicalStream using provided arguments. â€¦","Constructs a new Complexity with provided level as major â€¦","Returns the bit count of all combined signals in this map.","Returns a vector-style signal if the input width is â€¦","","","Returns the ready signal.","Returns whether the signal is reversed w.r.t. the source","Returns the signal list for this physical stream.","Returns the <code>stai</code> signal, if applicable for this â€¦","Returns the number of <code>stai</code> (start index) bits in this â€¦","Returns the <code>strb</code> signal, if applicable for this â€¦","Returns the number of <code>strb</code> (strobe) bits in this physical â€¦","","","","","","","","","","Try to convert a vector of NonNegative into a complexity. â€¦","","","","","","","","","","","","","","","","","","","","","","Returns the user fields in this physical stream.","Returns the <code>user</code> signal, if applicable for this â€¦","Returns the bit count of the user fields in this physical â€¦","Returns the valid signal.","","Returns a vector-style signal.","","",""],"i":[1,1,0,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,2,3,4,2,1,5,6,3,4,2,1,5,6,3,0,1,5,6,3,1,5,6,3,5,6,3,2,6,0,7,4,1,5,6,6,6,3,5,6,3,2,4,2,1,1,5,6,6,3,3,4,2,1,1,1,1,5,6,3,3,2,3,6,0,5,5,6,3,8,4,2,1,5,6,3,3,3,3,4,0,5,1,5,6,3,2,5,3,3,0,5,6,3,0,3,9,10,1,5,6,3,1,6,3,4,2,1,5,6,6,6,3,3,3,4,2,1,5,6,3,6,3,4,2,1,5,6,3,2,2,11,12,13,14,15,16,17,0,0,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,0,0,20,0,20,21,22,20,21,22,21,22,20,21,22,20,21,22,21,22,20,21,22,21,22,20,21,22,20,21,22,22,20,21,22,22,20,21,22,21,21,22,20,21,22,20,21,22,20,21,22,21,21,20,21,22,21,22,0,0,0,23,0,0,0,24,25,24,25,24,25,24,25,25,24,25,24,25,24,25,24,25,26,26,0,0,27,0,27,0,0,0,0,0,26,0,0,28,26,29,28,26,30,27,31,32,33,34,29,28,26,30,27,31,32,33,34,29,28,26,30,27,31,32,29,28,26,30,27,31,32,33,0,28,26,31,32,33,31,32,29,28,26,27,31,28,26,29,28,26,30,27,31,32,33,34,29,28,26,26,30,27,27,31,32,33,34,28,26,31,28,29,28,31,32,33,34,28,28,29,28,26,30,27,31,32,33,34,28,29,34,26,32,31,30,29,28,26,31,29,28,31,32,31,28,28,32,32,26,29,27,31,32,29,28,26,30,27,31,32,29,28,26,30,27,31,32,33,34,29,28,26,30,27,31,32,33,34,29,31,30,29,28,26,30,27,31,32,33,34,28,26,27,31,31,32,35,36,0,0,0,0,0,0,0,37,38,39,40,41,40,41,37,38,39,42,0,0,43,0,0,0,43,0,0,0,44,43,44,45,43,44,45,43,44,43,43,45,46,47,48,43,44,45,43,44,43,44,45,45,43,44,43,45,43,44,45,49,43,43,44,45,43,44,45,43,44,45,50,51,52,0,0,52,52,53,0,51,0,0,51,0,53,0,54,55,0,51,54,55,52,0,0,51,53,52,56,57,58,51,59,60,54,55,53,52,56,57,58,51,59,60,54,55,56,57,58,51,53,52,56,57,58,51,59,60,54,55,53,52,56,57,58,51,59,60,54,55,51,56,53,52,56,56,53,52,56,57,58,51,59,60,54,55,53,52,56,57,58,51,59,60,54,53,52,56,57,58,51,59,60,54,55,53,52,56,57,58,51,51,51,51,51,59,60,54,55,53,52,53,52,56,57,58,51,59,60,54,55,51,56,51,54,54,57,58,59,60,54,56,57,58,51,59,60,54,55,56,56,59,51,53,56,51,56,58,56,53,52,56,57,58,51,59,60,54,55,53,52,56,57,58,51,51,59,60,54,55,53,52,56,57,58,51,59,60,54,55,57,58,51,51,51,53,52,56,57,58,51,59,60,54,55,61,62,63,64,65,66,67,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,70,70,69,0,71,72,73,74,75,72,70,69,71,73,74,75,72,70,69,71,73,74,75,72,70,69,71,73,74,75,72,70,69,71,73,74,72,73,72,74,72,72,72,73,72,74,75,72,70,69,71,73,74,74,74,75,72,70,69,71,73,74,74,75,72,72,70,69,71,73,73,73,74,71,74,75,72,70,69,71,73,75,75,73,72,74,74,70,75,72,69,71,73,74,75,72,74,73,71,71,74,73,71,72,73,72,73,72,74,75,72,70,69,71,73,74,74,74,75,72,70,69,71,73,74,75,72,70,69,71,73,72,74,75,72,70,69,71,73,72,73,72,73,75,71,71,71,76],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["error",4]],[[["",0]],["nonzeroreal",3]],[[["",0]],["name",3]],[[["",0]],["pathname",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["nonzeroreal",3]],["ordering",4]],[[["",0],["name",3]],["ordering",4]],[[["",0],["pathname",3]],["ordering",4]],[[]],[[["",0]],["str",0]],null,[[["",0]],["option",4,[["string",3]]]],[[["",0],["metadata",3]],["bool",0]],[[["",0],["error",4]],["bool",0]],[[["",0],["nonzeroreal",3]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["name",3]],["bool",0]],[[["",0],["string",3]],["bool",0]],[[["",0],["pathname",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[],["result",6,[["vec",3]]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["error",3]]],[[["setloggererror",3]]],[[["box",3,[["error",8]]]]],[[]],[[]],[[["name",3]]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["str",0]],["result",6]],null,[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["str",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["option",4,[["name",3]]]],[[["",0]],["usize",0]],[[["",0],["record",3]]],null,[[["nonzeroreal",3]]],[[["",0],["error",4]],["bool",0]],[[["",0],["nonzeroreal",3]],["bool",0]],[[["",0],["name",3]],["bool",0]],[[["",0],["pathname",3]],["bool",0]],[[]],[[],["result",6]],[[]],[[["",0]],["option",4,[["pathname",3]]]],null,[[["",0],["nonzeroreal",3]],["option",4,[["ordering",4]]]],[[["",0],["name",3]],["option",4,[["ordering",4]]]],[[["",0],["pathname",3]],["option",4,[["ordering",4]]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["string",3]],["result",6]],[[],["result",4]],[[["str",0]],["result",6]],[[],["result",4]],[[["str",0]],["result",6]],[[["string",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",6]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["package",3]],[[["",0]],["library",3]],[[["",0],["",0]]],[[["",0],["library",3]],["bool",0]],[[["",0]],["package",3]],[[["",0],["formatter",3]],["result",6]],[[]],[[["name",3],["uniquelynamedbuilder",3,[["streamlet",3]]]],["result",6]],[[["path",3]],["result",6]],[[["",0]],["str",0]],[[]],[[["",0],["library",3]],["bool",0]],[[["",0]],["vec",3,[["streamlet",3]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["project",3]],[[["",0]],["project",3]],[[["",0],["",0]]],[[["",0],["project",3]],["bool",0]],[[["",0]],["project",3]],[[["",0],["formatter",3]],["result",6]],[[]],[[["name",3],["uniquelynamedbuilder",3,[["library",3]]]],["result",6]],[[["",0]],["str",0]],[[]],[[["",0]]],[[["",0],["project",3]],["bool",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vec",3,[["port",3]]]],[[["",0],["option",4,[["str",0]]]],["component",3]],[[["",0]],["mode",4]],[[["",0]],["interface",3]],[[["",0]],["streamlet",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["option",4,[["string",3]]]],[[["",0]],["option",4,[["string",3]]]],[[["",0],["mode",4]],["bool",0]],[[["",0],["interface",3]],["bool",0]],[[["",0],["streamlet",3]],["bool",0]],[[["",0]],["vec",3,[["port",3]]]],[[["",0],["option",4,[["str",0]]]],["option",4,[["component",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["name",3],["uniquelynamedbuilder",3,[["interface",3]]],["option",4,[["str",0]]]],["result",6]],[[["str",0]],["result",6]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]]],[[]],[[]],[[]],[[["",0]],["mode",4]],[[["",0],["interface",3]],["bool",0]],[[["",0],["streamlet",3]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["mode",4],["option",4,[["str",0]]]],["result",6]],[[["",0]],["logicaltype",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,[[["",0],["project",3]],["result",6]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[],["chiselbackend",3]],[[]],[[]],[[["",0],["project",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["nonnegative",6]],["type",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["field",3]],[[["",0]],["record",3]],[[["",0]],["type",4]],[[["",0]],["parameter",3]],[[["",0]],["mode",4]],[[["",0]],["port",3]],[[["",0]],["component",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[["",0],["bool",0]],["result",6,[["string",3]]]],[[["",0],["bool",0]],["result",6,[["string",3]]]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["option",4,[["string",3]]]],[[["",0]],["option",4,[["string",3]]]],[[["",0],["field",3]],["bool",0]],[[["",0],["record",3]],["bool",0]],[[["",0],["type",4]],["bool",0]],[[["",0],["mode",4]],["bool",0]],[[["",0],["port",3]],["bool",0]],[[["",0]]],[[["",0],["vec",3,[["string",3]]],["bool",0]],["typebundle",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["width",4]]],[[]],[[]],[[["mode",4]]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],null,null,[[["",0],["field",3]]],[[["",0],["type",4],["bool",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],null,[[["",0]],["vec",3,[["type",4]]]],[[["",0]],["vec",3,[["type",4]]]],[[["",0]],["mode",4]],null,[[["",0],["field",3]],["bool",0]],[[["",0],["record",3]],["bool",0]],[[["",0],["type",4]],["bool",0]],[[["",0],["port",3]],["bool",0]],[[["type",4],["bool",0]],["field",3]],[[["vec",3,[["field",3]]]],["record",3]],[[["mode",4],["type",4]],["port",3]],[[["vec",3,[["parameter",3]]],["vec",3,[["port",3]]],["option",4,[["string",3]]]],["component",3]],[[["mode",4],["type",4],["option",4,[["string",3]]]],["port",3]],[[],["record",3]],[[],["record",3]],[[["",0]],["vec",3]],[[["",0]],["vec",3]],[[["vec",3,[["field",3]]]],["type",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["type",4]],[[["",0]],["type",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["result",6,[["string",3]]]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[["",0]],["vec",3,[["signal",3]]]],[[["",0]],["vec",3,[["port",3]]]],[[["",0],["option",4,[["str",0]]]],["component",3]],[[["",0]],["package",3]],[[["",0]],["project",3]],[[["",0]],["package",3]],[[["",0]],["project",3]],[[["",0]],["option",4,[["type",4]]]],[[["",0]],["vec",3,[["port",3]]]],[[["",0],["option",4,[["str",0]]]],["option",4,[["component",3]]]],[[["",0],["mode",4]],["mode",4]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["abstractionlevel",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["app",3]],[[],["app",3]],[[["",0]],["abstractionlevel",4]],[[["",0],["",0]]],[[["",0]],["vhdlconfig",3]],[[["",0]],["result",6,[["string",3]]]],[[["",0],["bool",0]],["result",6,[["string",3]]]],[[["",0],["abstractionlevel",4]],["result",6,[["string",3]]]],[[]],[[]],[[],["vhdlbackend",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["vhdlconfig",3]]],[[]],[[["argmatches",3]]],[[["argmatches",3]]],[[["str",0]],["result",6]],[[["",0],["project",3]],["result",6]],[[]],[[]],[[]],[[["",0]],["vec",3,[["type",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",6,[["string",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vec",3,[["signal",3]]]],[[["",0]],["vec",3,[["signal",3]]]],[[["",0]],["vec",3,[["signal",3]]]],[[["",0]],["vec",3,[["signal",3]]]],[[["",0]],["direction",4]],[[["",0]],["synchronicity",4]],[[["",0]],["stream",3]],[[["",0]],["group",3]],[[["",0]],["union",3]],[[["",0]],["logicaltype",4]],[[["",0]],["elementstream",3]],[[["",0]],["signals",3]],[[["",0]],["logicalsplititem",4]],[[["",0]],["physicalsplititem",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["logicaltype",4]],["bool",0]],[[["",0]],["logicaltype",4]],[[]],[[]],[[["",0]],["nonnegative",6]],[[["",0]],["direction",4]],[[["",0],["direction",4]],["bool",0]],[[["",0],["synchronicity",4]],["bool",0]],[[["",0],["stream",3]],["bool",0]],[[["",0],["group",3]],["bool",0]],[[["",0],["union",3]],["bool",0]],[[["",0],["logicaltype",4]],["bool",0]],[[["",0],["elementstream",3]],["bool",0]],[[["",0],["signals",3]],["bool",0]],[[["",0],["logicalsplititem",4]],["bool",0]],[[["",0],["physicalsplititem",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0]],["option",4,[["type",4]]]],[[["",0]],["option",4,[["type",4]]]],[[["",0]],["option",4,[["type",4]]]],[[["",0]],["option",4,[["type",4]]]],[[["",0]],["fields",3]],[[["",0]],["fields",3]],[[["",0]],["fields",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["union",3]]],[[["group",3]]],[[["stream",3]]],[[["positive",6]]],[[]],[[]],[[]],[[]],[[["str",0]],["result",6]],[[["str",0]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]],["logicaltype",4]],[[["",0]],["logicaltype",4]],[[["",0]],["logicaltype",4]],[[["",0],["stream",3]],["bool",0]],[[["",0],["group",3]],["bool",0]],[[["",0],["union",3]],["bool",0]],[[["",0],["logicaltype",4]],["bool",0]],[[["",0],["elementstream",3]],["bool",0]],[[["",0],["signals",3]],["bool",0]],[[["",0],["logicalsplititem",4]],["bool",0]],[[["",0],["physicalsplititem",4]],["bool",0]],[[["logicaltype",4],["positivereal",6],["nonnegative",6],["synchronicity",4],["direction",4],["option",4,[["logicaltype",4]]],["bool",0]]],[[["logicaltype",4]]],[[["",0]]],[[["",0]],["intoiter",3,[["physicalsplititem",4]]]],[[["",0]]],[[["",0]]],[[["",0]],["intoiter",3,[["logicalsplititem",4]]]],[[["",0]],["synchronicity",4]],[[["",0]],["option",4]],[[["",0]],["positivereal",6]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["nonnegative",6]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",6]],[[["nonnegative",6]],["result",6]],[[],["result",6]],[[],["result",6]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["str",0]],["iresult",6,[["str",0],["logicaltype",4],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["bool",0],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["str",0],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["str",0],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["str",0],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["vec",3,[["str",0]]],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["str",0],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["complexity",3],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["direction",4],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["option",4,[["string",3]]],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["logicaltype",4],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["interface",3],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["vec",3,[["streamlet",3]]],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["logicaltype",4],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["mode",4],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["name",3],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["logicaltype",4],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["logicaltype",4],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["streamlet",3],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["synchronicity",4],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["str",0],["verboseerror",3,[["str",0]]]]]],[[["str",0]],["iresult",6,[["str",0],["logicaltype",4],["verboseerror",3,[["str",0]]]]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["origin",4]],["signal",3]],[[["",0]],["nonnegative",6]],[[["",0]],["nonnegative",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["complexity",3]],[[["",0]],["fields",3]],[[["",0]],["physicalstream",3]],[[["",0]],["origin",4]],[[["",0]],["width",4]],[[["",0]],["signal",3]],[[["",0]],["signallist",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["complexity",3]],["ordering",4]],[[["",0]],["complexity",3]],[[["",0]],["option",4,[["signal",3]]]],[[["",0]],["nonnegative",6]],[[]],[[["",0]],["nonnegative",6]],[[["",0]],["fields",3]],[[["",0]],["positive",6]],[[["",0]],["option",4,[["signal",3]]]],[[["",0]],["nonnegative",6]],[[["",0],["",0]],["bool",0]],[[["",0],["fields",3]],["bool",0]],[[["",0],["physicalstream",3]],["bool",0]],[[["",0],["origin",4]],["bool",0]],[[["",0],["width",4]],["bool",0]],[[["",0],["signal",3]],["bool",0]],[[["",0],["signallist",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["nonnegative",6]]],[[]],[[]],[[["elementstream",3]],["physicalstream",3]],[[]],[[]],[[]],[[]],[[["physicalstream",3]],["signallist",3]],[[["physicalstream",3]],["signallist",3]],[[]],[[["str",0]],["result",6]],[[["",0]],["str",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]],["option",4,[["signal",3]]]],[[["",0]],["nonnegative",6]],[[["",0]]],[[["",0]],["nonnegative",6]],[[["",0],["mode",4]],["mode",4]],[[["",0],["fields",3]],["bool",0]],[[["",0],["physicalstream",3]],["bool",0]],[[["",0],["width",4]],["bool",0]],[[["",0],["signal",3]],["bool",0]],[[["",0],["signallist",3]],["bool",0]],[[],["result",6]],[[],["result",6]],[[["positive",6],["nonnegative",6]]],[[["nonnegative",6]]],[[["",0]],["option",4,[["nonnegative",6]]]],[[["origin",4],["option",4,[["nonnegative",6]]]],["option",4,[["signal",3]]]],[[["",0]],["origin",4]],[[["",0],["complexity",3]],["option",4,[["ordering",4]]]],[[["",0]],["signal",3]],[[["",0]],["bool",0]],[[["",0]],["signallist",3]],[[["",0]],["option",4,[["signal",3]]]],[[["",0]],["nonnegative",6]],[[["",0]],["option",4,[["signal",3]]]],[[["",0]],["nonnegative",6]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[["vec",3,[["nonnegative",6]]]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",0],["usize",0]],["result",6]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["fields",3]],[[["",0]],["option",4,[["signal",3]]]],[[["",0]],["nonnegative",6]],[[["",0]],["signal",3]],[[["",0]]],[[["origin",4],["positive",6]],["signal",3]],[[["",0]],["width",4]],[[["",0],["string",3]],["signal",3]],null],"p":[[4,"Error"],[3,"UniquelyNamedBuilder"],[3,"PathName"],[3,"Logger"],[3,"NonZeroReal"],[3,"Name"],[8,"Document"],[8,"Identify"],[8,"Reverse"],[8,"Reversed"],[13,"CLIError"],[13,"InvalidArgument"],[13,"FileIOError"],[13,"ParsingError"],[13,"InvalidTarget"],[13,"BackEndError"],[13,"InterfaceError"],[3,"Library"],[3,"Project"],[4,"Mode"],[3,"Interface"],[3,"Streamlet"],[8,"GenerateProject"],[3,"ChiselConfig"],[3,"ChiselBackEnd"],[4,"Type"],[4,"Mode"],[3,"Record"],[3,"Field"],[3,"Parameter"],[3,"Port"],[3,"Component"],[3,"Package"],[3,"Project"],[13,"Record"],[13,"BitVec"],[8,"Typify"],[8,"Portify"],[8,"Componentify"],[8,"Packify"],[8,"Projectify"],[8,"ModeFor"],[4,"AbstractionLevel"],[3,"VHDLConfig"],[3,"VHDLBackEnd"],[8,"Declare"],[8,"DeclareType"],[8,"DeclareLibrary"],[8,"Analyze"],[8,"VHDLIdentifier"],[4,"LogicalType"],[4,"Synchronicity"],[4,"Direction"],[4,"LogicalSplitItem"],[4,"PhysicalSplitItem"],[3,"Stream"],[3,"Group"],[3,"Union"],[3,"ElementStream"],[3,"Signals"],[13,"Signals"],[13,"Stream"],[13,"Bits"],[13,"Group"],[13,"Union"],[13,"Stream"],[13,"Signals"],[13,"Stream"],[4,"Width"],[4,"Origin"],[3,"Signal"],[3,"PhysicalStream"],[3,"SignalList"],[3,"Complexity"],[3,"Fields"],[13,"Vector"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};