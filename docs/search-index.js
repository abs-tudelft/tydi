var searchIndex={};
searchIndex["tydi"] = {"doc":"Tydi is an open specification for complex data structures…","i":[[3,"Logger","tydi","Simple logger for Tydi.",null,null],[3,"UniquelyNamedBuilder","","A builder for lists of things requiring unique names.",null,null],[3,"NonZeroReal","","",null,null],[3,"Name","","Type-safe wrapper for valid names.",null,null],[3,"PathName","","Type-safe path for names.",null,null],[4,"Error","","Error variants used in this crate.",null,null],[13,"UnknownError","","Unknown error.",0,null],[13,"CLIError","","Generic CLI error.",0,null],[13,"InvalidArgument","","Indicates an invalid argument is provided.",0,null],[13,"UnexpectedDuplicate","","Indicates an unexpected duplicate is provided.",0,null],[13,"FileIOError","","File I/O error.",0,null],[13,"ParsingError","","Parsing error.",0,null],[13,"InvalidTarget","","Invalid target.",0,null],[13,"BackEndError","","Back-end error.",0,null],[13,"InterfaceError","","Forbidden interface name.",0,null],[11,"new","","Construct a new builder.",1,[[],["self"]]],[11,"add_item","","Add an item to the builder.",1,[[["self"],["t"]]]],[11,"with_item","","Return this builder with the item appended.",1,[[["t"]],["self"]]],[11,"with_items","","Return this builder with the items appended.",1,[[],["self"]]],[11,"finish","","Finalize the builder, checking whether all names are…",1,[[],[["result",["vec"]],["vec"]]]],[0,"design","","Constructs that are used to generate hardware designs,…",null,null],[0,"library","tydi::design","This module contains the [Library] structure, used to…",null,null],[3,"Library","tydi::design::library","A collection of Streamlets.",null,null],[11,"streamlets","","",2,[[["self"]],[["vec",["streamlet"]],["streamlet"]]]],[11,"from_builder","","Construct a Library from a UniquelyNamedBuilder with…",2,[[["uniquelynamedbuilder",["streamlet"]],["streamlet"],["name"]],["result"]]],[11,"from_file","","Construct a Library from a Streamlet Definition File.",2,[[["path"]],["result"]]],[0,"project","tydi::design","",null,null],[3,"Project","tydi::design::project","A collection of Streamlets.",null,null],[11,"from_builder","","Construct a Project from a UniquelyNamedBuilder with…",3,[[["uniquelynamedbuilder",["library"]],["library"],["name"]],["result"]]],[11,"libraries","","",3,[[["self"]]]],[0,"streamlet","tydi::design","This module contains the Streamlet structure.",null,null],[3,"Interface","tydi::design::streamlet","A Streamlet interface.",null,null],[3,"Streamlet","","Streamlet interface definition.",null,null],[4,"Mode","","Streamlet interface mode.",null,null],[13,"Out","","The interface is an output of the streamlet.",4,null],[13,"In","","The interface is an input of the streamlet.",4,null],[11,"mode","","Return the [Mode] of the interface.",5,[[["self"]],["mode"]]],[11,"typ","","Return the [LogicalStreamType] of the interface.",5,[[["self"]],["logicaltype"]]],[11,"try_new","","Try to construct a new interface.",5,[[["str"],["mode"],["option",["str"]]],["result"]]],[11,"with_doc","","",5,[[],["self"]]],[11,"interfaces","","Return an iterator over the interfaces of this Streamlet.",6,[[["self"]]]],[11,"from_builder","","Construct a new streamlet from an interface builder that…",6,[[["name"],["str"],["interface"],["option",["str"]],["uniquelynamedbuilder",["interface"]]],["result"]]],[11,"with_doc","","Return this streamlet with documentation added.",6,[[],["self"]]],[0,"logical","tydi","Logical streams.",null,null],[3,"Stream","tydi::logical","The stream-manipulating logical stream type.",null,null],[3,"Group","","The Group stream type acts as a product type (composition).",null,null],[3,"Union","","Reference",null,null],[3,"ElementStream","","An element stream with a path name and LogicalType.…",null,null],[3,"Signals","","",null,null],[4,"Direction","","Direction of a stream.",null,null],[13,"Forward","","Forward indicates that the child stream flows in the same…",7,null],[13,"Reverse","","Reverse indicates that the child stream acts as a response…",7,null],[4,"Synchronicity","","The synchronicity of the elements in the child stream with…",null,null],[13,"Sync","","Indicating that there is a one-to-one relation between the…",8,null],[13,"Flatten","","Indicating that there is a one-to-one relation between the…",8,null],[13,"Desync","","Desync may be used if the relation between the elements in…",8,null],[13,"FlatDesync","","FlatDesync, finally, does the same thing as Desync, but…",8,null],[4,"LogicalType","","Types of logical streams.",null,null],[13,"Null","","The Null stream type indicates the transferrence of…",9,null],[13,"Bits","","The Bits stream type, defined as `Bits(b)`, indicates the…",9,null],[13,"Group","","The Group stream type acts as a product type (composition).",9,null],[13,"Union","","The Union stream type acts as a sum type (exclusive…",9,null],[13,"Stream","","The Stream type is used to define a new physical stream.",9,null],[4,"LogicalSplitItem","","A split item is either an async signal (outside…",null,null],[13,"Signals","","",10,null],[13,"Stream","","",10,null],[4,"PhysicalSplitItem","","A split item is either an async signal (outside…",null,null],[13,"Signals","","",11,null],[13,"Stream","","",11,null],[11,"new","","",12,[[["option",["logicaltype"]],["direction"],["logicaltype"],["synchronicity"],["bool"],["nonnegative"],["positivereal"]],["self"]]],[11,"new_basic","","",12,[[["logicaltype"]],["self"]]],[11,"data","","",12,[[["self"]],["logicaltype"]]],[11,"direction","","Returns the direction of this stream.",12,[[["self"]],["direction"]]],[11,"synchronicity","","Returns the synchronicity of this stream.",12,[[["self"]],["synchronicity"]]],[11,"dimensionality","","Returns the dimensionality of this stream.",12,[[["self"]],["nonnegative"]]],[11,"throughput","","Returns the throughput ratio of this stream.",12,[[["self"]],["positivereal"]]],[11,"is_null","","Returns true if this stream is null i.e. it results in no…",12,[[["self"]],["bool"]]],[11,"try_new","","Returns a new Group logical stream type. Returns an error…",13,[[],["result"]]],[11,"iter","","Returns an iterator over the fields of the Group.",13,[[["self"]]]],[11,"try_new","","Returns a new Union logical stream type. Returns an error…",14,[[],["result"]]],[11,"tag","","Returns the tag name and width of this union. Reference",14,[[["self"]],["option"]]],[11,"iter","","Returns an iterator over the fields of the Union.",14,[[["self"]]]],[11,"try_new_bits","","Returns a new Bits stream type with the provided bit count…",9,[[["nonnegative"]],["result"]]],[11,"try_new_group","","Returns a new Group stream type from the provided iterator…",9,[[],["result"]]],[11,"try_new_union","","",9,[[],["result"]]],[11,"is_element_only","","Returns true if this logical stream consists of only…",9,[[["self"]],["bool"]]],[11,"is_null","","Returns true if and only if this logical stream does not…",9,[[["self"]],["bool"]]],[11,"compatible","","",9,[[["logicaltype"],["self"]],["bool"]]],[11,"split","","",9,[[["self"]],[["intoiter",["logicalsplititem"]],["logicalsplititem"]]]],[11,"physical","","",9,[[["self"]],[["intoiter",["physicalsplititem"]],["physicalsplititem"]]]],[11,"path_name","","",15,[[["self"]]]],[11,"logical_type","","Returns the LogicalType of this element. Contains no…",15,[[["self"]],["logicaltype"]]],[11,"fields","","Return all fields in this element stream",15,[[["self"]],["fields"]]],[11,"logical_type","","Returns the LogicalType of this element.",16,[[["self"]],["logicaltype"]]],[11,"fields","","Returns all fields in these async signals.",16,[[["self"]],["fields"]]],[11,"is_stream","","",10,[[["self"]],["bool"]]],[11,"is_signals","","",10,[[["self"]],["bool"]]],[11,"logical_type","","",10,[[["self"]],["logicaltype"]]],[11,"fields","","",10,[[["self"]],["fields"]]],[0,"physical","tydi","Physical streams.",null,null],[3,"Complexity","tydi::physical","Interface complexity level.",null,null],[3,"Fields","","",null,null],[3,"PhysicalStream","","Physical stream.",null,null],[3,"Signal","","",null,null],[3,"SignalList","","Signal list for the signals in a physical stream.",null,null],[4,"Origin","","",null,null],[13,"Source","","",17,null],[13,"Sink","","",17,null],[4,"Width","","",null,null],[13,"Scalar","","Non-vectorized single bit.",18,null],[13,"Vector","","Vectorized multiple bits.",18,null],[6,"BitCount","","Positive number of bits.",null,null],[11,"new","","Constructs a new Complexity with provided level. Returns…",19,[[],["result"]]],[11,"new_major","","Constructs a new Complexity with provided level as major…",19,[[["nonnegative"]],["self"]]],[11,"level","","Returns the level of this Complexity.",19,[[["self"]]]],[11,"major","","Returns the major version of this Complexity level.",19,[[["self"]],["nonnegative"]]],[11,"new","","",20,[[],["result"]]],[11,"iter","","",20,[[["self"]]]],[11,"keys","","",20,[[["self"]]]],[11,"values","","",20,[[["self"]]]],[11,"try_new","","",21,[[["t"],["usize"]],["result"]]],[11,"new","","Constructs a new PhysicalStream using provided arguments.…",21,[[["positive"],["nonnegative"]],["self"]]],[11,"element_fields","","Returns the element fields in this physical stream.",21,[[["self"]],["fields"]]],[11,"element_lanes","","Returns the number of element lanes in this physical stream.",21,[[["self"]],["positive"]]],[11,"dimensionality","","Returns the dimensionality of this physical stream.",21,[[["self"]],["nonnegative"]]],[11,"complexity","","Returns the complexity of this physical stream.",21,[[["self"]],["complexity"]]],[11,"user","","Returns the user fields in this physical stream.",21,[[["self"]],["fields"]]],[11,"data_bit_count","","Returns the bit count of the data (element) fields in this…",21,[[["self"]],["nonnegative"]]],[11,"last_bit_count","","Returns the number of last bits in this physical stream.…",21,[[["self"]],["nonnegative"]]],[11,"stai_bit_count","","Returns the number of `stai` (start index) bits in this…",21,[[["self"]],["nonnegative"]]],[11,"endi_bit_count","","Returns the number of `endi` (end index) bits in this…",21,[[["self"]],["nonnegative"]]],[11,"strb_bit_count","","Returns the number of `strb` (strobe) bits in this…",21,[[["self"]],["nonnegative"]]],[11,"user_bit_count","","Returns the bit count of the user fields in this physical…",21,[[["self"]],["nonnegative"]]],[11,"signal_list","","Returns the signal list for this physical stream.",21,[[["self"]],["signallist"]]],[11,"bit_count","","Returns the combined bit count of all signals in this…",21,[[["self"]],["nonnegative"]]],[11,"opt_vec","","Returns a vector-style signal if the input width is…",22,[[["option",["nonnegative"]],["nonnegative"],["origin"]],[["signal"],["option",["signal"]]]]],[11,"vec","","Returns a vector-style signal.",22,[[["positive"],["origin"]],["signal"]]],[11,"bit","","Returns a single bit non-vector style signal.",22,[[["origin"]],["signal"]]],[11,"reversed","","Returns whether the signal is reversed w.r.t. the source",22,[[["self"]],["bool"]]],[11,"origin","","",22,[[["self"]],["origin"]]],[11,"width","","",22,[[["self"]],["width"]]],[11,"with_name","","",22,[[["string"],["self"]],["signal"]]],[11,"valid","","Returns the valid signal.",23,[[["self"]],["signal"]]],[11,"ready","","Returns the ready signal.",23,[[["self"]],["signal"]]],[11,"data","","Returns the `data` signal, if applicable for this…",23,[[["self"]],[["signal"],["option",["signal"]]]]],[11,"last","","Returns the `last` signal, if applicable for this…",23,[[["self"]],[["signal"],["option",["signal"]]]]],[11,"stai","","Returns the `stai` signal, if applicable for this…",23,[[["self"]],[["signal"],["option",["signal"]]]]],[11,"endi","","Returns the `endi` signal, if applicable for this…",23,[[["self"]],[["signal"],["option",["signal"]]]]],[11,"strb","","Returns the `strb` signal, if applicable for this…",23,[[["self"]],[["signal"],["option",["signal"]]]]],[11,"user","","Returns the `user` signal, if applicable for this…",23,[[["self"]],[["signal"],["option",["signal"]]]]],[11,"opt_bit_count","","Returns the bit count of all combined signals in this map.",23,[[["self"]],[["nonnegative"],["option",["nonnegative"]]]]],[11,"bit_count","","Returns the bit count of all combined signals in this map.",23,[[["self"]],["nonnegative"]]],[0,"generator","tydi","",null,null],[0,"chisel","tydi::generator","Chisel back-end.",null,null],[3,"ChiselConfig","tydi::generator::chisel","Chisel back-end configuration parameters.",null,null],[3,"ChiselBackEnd","","A configurable VHDL back-end entry point.",null,null],[0,"common","tydi::generator","Common hardware representation.",null,null],[3,"Field","tydi::generator::common","A field for a `Record`.",null,null],[3,"Record","","Inner struct for `Type::Record`",null,null],[3,"Parameter","","A parameter for components.",null,null],[12,"name","","",24,null],[12,"typ","","",24,null],[3,"Port","","A port.",null,null],[3,"Component","","A component.",null,null],[3,"Package","","A library of components and types.",null,null],[12,"identifier","","The identifier.",25,null],[12,"components","","The components declared within the library.66",25,null],[3,"Project","","A project with libraries",null,null],[12,"identifier","","The name of the project.",26,null],[12,"libraries","","The libraries contained within the projects.",26,null],[4,"Type","","Hardware types.",null,null],[13,"Bit","","A single bit.",27,null],[13,"BitVec","","A vector of bits.",27,null],[12,"width","tydi::generator::common::Type","The width of the vector.",27,null],[13,"Record","tydi::generator::common","A record.",27,null],[4,"Mode","","Modes for ports.",null,null],[13,"In","","Input.",28,null],[13,"Out","","Output.",28,null],[0,"convert","","Generator methods and implementations for Tydi types.",null,null],[17,"CANON_SUFFIX","tydi::generator::common::convert","Suffix provided to the canonical representation of…",null,null],[8,"Typify","","Trait to create common representation types from things in…",null,null],[10,"canonical","","",29,[[["self"]],[["vec",["signal"]],["signal"]]]],[11,"fancy","","",29,[[["self"]],[["type"],["option",["type"]]]]],[8,"Portify","","Trait to create common representation ports from things in…",null,null],[10,"canonical","","",30,[[["self"]],[["vec",["port"]],["port"]]]],[11,"fancy","","",30,[[["self"]],[["vec",["port"]],["port"]]]],[8,"Componentify","","Trait to create common representation components from…",null,null],[10,"canonical","","",31,[[["str"],["option",["str"]],["self"]],["component"]]],[11,"fancy","","",31,[[["str"],["option",["str"]],["self"]],[["component"],["option",["component"]]]]],[8,"Packify","","Trait to create common representation of a package.",null,null],[10,"canonical","","",32,[[["self"]],["package"]]],[10,"fancy","","",32,[[["self"]],["package"]]],[8,"Projectify","","Trait to create common representation of a project.",null,null],[10,"canonical","","",33,[[["self"]],["project"]]],[10,"fancy","","",33,[[["self"]],["project"]]],[8,"ModeFor","","Trait that helps to determine the common representation…",null,null],[10,"mode_for","","Return the port mode of self, given a streamlet interface…",34,[[["mode"],["self"]],["mode"]]],[6,"TypeBundle","tydi::generator::common","Bundle of names and types. Useful to represent flattened…",null,null],[11,"new","","Construct a new record field.",35,[[["type"],["bool"]],["field"]]],[11,"typ","","Returns the type of this field.",35,[[["self"]],["type"]]],[11,"is_reversed","","Returns true if this field is reversed.",35,[[["self"]],["bool"]]],[11,"new","","Construct a new record.",36,[[["field"],["vec",["field"]]],["record"]]],[11,"new_empty","","Construct a new record without any fields.",36,[[],["record"]]],[11,"new_empty_stream","","Construct a new record with a valid and ready bit.",36,[[],["record"]]],[11,"insert_new_field","","Create a new field and add it to the record.",36,[[["type"],["self"],["bool"]]]],[11,"insert","","Add a field to the record.",36,[[["self"],["field"]]]],[11,"has_reversed_field","","Returns true if the record contains a field that is…",36,[[["self"]],["bool"]]],[11,"has_reversed","","Returns true if the record contains a field that is…",36,[[["self"]],["bool"]]],[11,"fields","","Returns an iterable over the fields.",36,[[["self"]]]],[11,"is_empty","","Returns true if record contains no fields.",36,[[["self"]],["bool"]]],[11,"append_name_nested","","Append a string to the name of this record, and any nested…",36,[[["self"]],["self"]]],[11,"bitvec","","Construct a bit vector type.",27,[[["nonnegative"]],["type"]]],[11,"record","","Construct a record type.",27,[[["field"],["vec",["field"]]],["type"]]],[11,"flatten","","Flatten a type to a non-nested type bundle.",27,[[["string"],["vec",["string"]],["self"],["bool"]],["typebundle"]]],[11,"has_reversed","","",27,[[["self"]],["bool"]]],[11,"new","","Create a new port.",37,[[["mode"],["type"]],["port"]]],[11,"new_documented","","Create a new port with documentation.",37,[[["string"],["mode"],["type"],["option",["string"]]],["port"]]],[11,"mode","","Return the port mode.",37,[[["self"]],["mode"]]],[11,"typ","","Return the type of the port.",37,[[["self"]],["type"]]],[11,"has_reversed","","Returns true if the port type contains reversed fields.",37,[[["self"]],["bool"]]],[11,"with_doc","","Return this port with documentation added.",37,[[],["self"]]],[11,"set_doc","","Set the documentation of this port.",37,[[["self"]]]],[11,"new","","Create a new component.",38,[[["option",["string"]],["string"],["port"],["vec",["port"]],["parameter"],["vec",["parameter"]]],["component"]]],[11,"ports","","Return a reference to the ports of this component.",38,[[["self"]],["vec"]]],[11,"parameters","","Return a reference to the parameters of this component.",38,[[["self"]],["vec"]]],[11,"with_doc","","Return this component with documentation added.",38,[[],["self"]]],[11,"set_doc","","Set the documentation of this component.",38,[[["self"]]]],[0,"vhdl","tydi::generator","VHDL back-end.",null,null],[3,"VHDLConfig","tydi::generator::vhdl","VHDL back-end configuration parameters.",null,null],[3,"VHDLBackEnd","","A configurable VHDL back-end entry point.",null,null],[4,"AbstractionLevel","","Abstraction levels",null,null],[13,"Canonical","","",39,null],[13,"Fancy","","",39,null],[8,"Declare","","Generate trait for generic VHDL declarations.",null,null],[10,"declare","","Generate a VHDL declaration from self.",40,[[["self"]],[["result",["string"]],["string"]]]],[8,"DeclareType","","Generate trait for VHDL type declarations.",null,null],[10,"declare","","Generate a VHDL declaration from self.",41,[[["self"],["bool"]],[["result",["string"]],["string"]]]],[8,"DeclareLibrary","","Generate trait for VHDL package declarations.",null,null],[10,"declare","","Generate a VHDL declaration from self.",42,[[["abstractionlevel"],["self"]],[["result",["string"]],["string"]]]],[8,"VHDLIdentifier","","Generate trait for VHDL identifiers.",null,null],[10,"vhdl_identifier","","Generate a VHDL identifier from self.",43,[[["self"]],[["result",["string"]],["string"]]]],[8,"Analyze","","Analyze trait for VHDL objects.",null,null],[10,"list_record_types","","List all record types used.",44,[[["self"]],[["type"],["vec",["type"]]]]],[11,"abstraction","","",45,[[["self"]],["abstractionlevel"]]],[11,"config","","",46,[[["self"]],["vhdlconfig"]]],[8,"GenerateProject","tydi::generator","Trait to generate back-end specific source files from the…",null,null],[10,"generate","","Generate source files from a [common::Project] and save…",47,[[["project"],["self"]],["result"]]],[0,"parser","tydi","Parser methods and implementations for Tydi types.",null,null],[0,"nom","tydi::parser","Nom-based parsers for Streamlet Definition Files.",null,null],[5,"name","tydi::parser::nom","",null,[[["str"]],[["str"],["verboseerror",["str"]],["iresult",["str","name","verboseerror"]],["name"]]]],[5,"comment_delimited","","Delimited comments, not meant for doc strings, so if it…",null,[[["str"]],[["str"],["iresult",["str","str","verboseerror"]],["verboseerror",["str"]]]]],[5,"take_until_newline_or_eof","","",null,[[["str"]],[["str"],["iresult",["str","str","verboseerror"]],["verboseerror",["str"]]]]],[5,"comment_line","","Line or eof delimited comment, not meant for doc string,…",null,[[["str"]],[["str"],["iresult",["str","str","verboseerror"]],["verboseerror",["str"]]]]],[5,"comment_doc","","Line comment meant for doc strings.",null,[[["str"]],[["str"],["iresult",["str","str","verboseerror"]],["verboseerror",["str"]]]]],[5,"comment","","",null,[[["str"]],[["str"],["iresult",["str","str","verboseerror"]],["verboseerror",["str"]]]]],[5,"comment_doc_block","","",null,[[["str"]],[["str"],["iresult",["str","vec","verboseerror"]],["verboseerror",["str"]],["vec",["str"]]]]],[5,"doc","","",null,[[["str"]],[["str"],["iresult",["str","option","verboseerror"]],["verboseerror",["str"]],["option",["string"]]]]],[5,"bool","","",null,[[["str"]],[["str"],["verboseerror",["str"]],["iresult",["str","bool","verboseerror"]],["bool"]]]],[5,"null","","",null,[[["str"]],[["str"],["verboseerror",["str"]],["iresult",["str","logicaltype","verboseerror"]],["logicaltype"]]]],[5,"bits","","",null,[[["str"]],[["str"],["verboseerror",["str"]],["iresult",["str","logicaltype","verboseerror"]],["logicaltype"]]]],[5,"logical_stream_type","","",null,[[["str"]],[["str"],["verboseerror",["str"]],["iresult",["str","logicaltype","verboseerror"]],["logicaltype"]]]],[5,"group","","",null,[[["str"]],[["str"],["verboseerror",["str"]],["iresult",["str","logicaltype","verboseerror"]],["logicaltype"]]]],[5,"union","","",null,[[["str"]],[["str"],["verboseerror",["str"]],["iresult",["str","logicaltype","verboseerror"]],["logicaltype"]]]],[5,"complexity","","",null,[[["str"]],[["str"],["verboseerror",["str"]],["iresult",["str","complexity","verboseerror"]],["complexity"]]]],[5,"synchronicity","","",null,[[["str"]],[["str"],["verboseerror",["str"]],["iresult",["str","synchronicity","verboseerror"]],["synchronicity"]]]],[5,"direction","","",null,[[["str"]],[["str"],["verboseerror",["str"]],["direction"],["iresult",["str","direction","verboseerror"]]]]],[5,"stream","","",null,[[["str"]],[["str"],["verboseerror",["str"]],["iresult",["str","logicaltype","verboseerror"]],["logicaltype"]]]],[5,"mode","","",null,[[["str"]],[["str"],["iresult",["str","mode","verboseerror"]],["verboseerror",["str"]],["mode"]]]],[5,"interface","","",null,[[["str"]],[["str"],["iresult",["str","interface","verboseerror"]],["verboseerror",["str"]],["interface"]]]],[5,"streamlet","","",null,[[["str"]],[["str"],["verboseerror",["str"]],["iresult",["str","streamlet","verboseerror"]],["streamlet"]]]],[5,"list_of_streamlets","","",null,[[["str"]],[["str"],["vec",["streamlet"]],["verboseerror",["str"]],["iresult",["str","vec","verboseerror"]]]]],[6,"Result","tydi","Result type with [`Error`] variants.",null,null],[6,"Positive","","Positive integer.",null,null],[6,"NonNegative","","Non-negative integer.",null,null],[6,"PositiveReal","","Positive real.",null,null],[8,"Document","","Trait for things that have documentation.",null,null],[10,"doc","","Return optionally existing user-written documentation of…",48,[[["self"]],[["string"],["option",["string"]]]]],[8,"Identify","","Trait for things that have names.",null,null],[10,"identifier","","",49,[[["self"]],["str"]]],[8,"Reverse","","In-place reverse.",null,null],[10,"reverse","","Reverse in-place.",50,[[["self"]]]],[8,"Reversed","","Construct reversed items.",null,null],[10,"reversed","","Returns a new reversed instance.",51,[[["self"]],["self"]]],[11,"new","","",52,[[["t"]],["result"]]],[11,"get","","",52,[[["self"]],["t"]]],[11,"try_new","","Constructs a new name wrapper. Returns an error when the…",53,[[],["result"]]],[11,"new","","",54,[[],["self"]]],[11,"try_new","","",54,[[],["result"]]],[11,"is_empty","","Returns true if this PathName is empty (∅).",54,[[["self"]],["bool"]]],[11,"push","","",54,[[["self"]]]],[11,"len","","",54,[[["self"]],["usize"]]],[11,"last","","",54,[[["self"]],[["option",["name"]],["name"]]]],[11,"parent","","",54,[[["self"]],[["option",["pathname"]],["pathname"]]]],[14,"cat","","Concatenate stuff using format with an underscore in…",null,null],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"equivalent","","",52,[[["k"],["self"]],["bool"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"to_string","","",53,[[["self"]],["string"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"equivalent","","",53,[[["k"],["self"]],["bool"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"to_string","","",54,[[["self"]],["string"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"equivalent","","",54,[[["k"],["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","tydi::design::library","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","tydi::design::project","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","tydi::design::streamlet","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","tydi::logical","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"equivalent","","",7,[[["k"],["self"]],["bool"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"equivalent","","",8,[[["k"],["self"]],["bool"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","tydi::physical","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"equivalent","","",19,[[["k"],["self"]],["bool"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","tydi::generator::chisel","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"from","tydi::generator::common","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","tydi::generator::vhdl","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"reverse","tydi::logical","Reverse this direction.",7,[[["self"]]]],[11,"reverse","","Reverse the direction of this stream.",12,[[["self"]]]],[11,"reversed","tydi::generator::common","",35,[[["self"]],["self"]]],[11,"reversed","","",28,[[["self"]],["self"]]],[11,"identifier","tydi::design::library","",2,[[["self"]],["str"]]],[11,"identifier","tydi::design::project","",3,[[["self"]],["str"]]],[11,"identifier","tydi::design::streamlet","",5,[[["self"]],["str"]]],[11,"identifier","","",6,[[["self"]],["str"]]],[11,"identifier","tydi::physical","",22,[[["self"]],["str"]]],[11,"identifier","tydi::generator::common","",35,[[["self"]],["str"]]],[11,"identifier","","",36,[[["self"]],["str"]]],[11,"identifier","","",37,[[["self"]],["str"]]],[11,"identifier","","",38,[[["self"]],["str"]]],[11,"doc","tydi::design::streamlet","",5,[[["self"]],[["string"],["option",["string"]]]]],[11,"doc","","",6,[[["self"]],[["string"],["option",["string"]]]]],[11,"doc","tydi::generator::common","",37,[[["self"]],[["string"],["option",["string"]]]]],[11,"doc","","",38,[[["self"]],[["string"],["option",["string"]]]]],[11,"canonical","tydi::logical","",9,[[["self"]],[["vec",["signal"]],["signal"]]]],[11,"fancy","","",9,[[["self"]],[["type"],["option",["type"]]]]],[11,"canonical","","",13,[[["self"]],[["vec",["signal"]],["signal"]]]],[11,"fancy","","",13,[[["self"]],[["type"],["option",["type"]]]]],[11,"canonical","","",14,[[["self"]],[["vec",["signal"]],["signal"]]]],[11,"fancy","","",14,[[["self"]],[["type"],["option",["type"]]]]],[11,"canonical","","",12,[[["self"]],[["vec",["signal"]],["signal"]]]],[11,"fancy","","",12,[[["self"]],[["type"],["option",["type"]]]]],[11,"canonical","tydi::design::streamlet","",5,[[["self"]],[["vec",["port"]],["port"]]]],[11,"fancy","","",5,[[["self"]],[["vec",["port"]],["port"]]]],[11,"canonical","","",6,[[["str"],["option",["str"]],["self"]],["component"]]],[11,"fancy","","",6,[[["str"],["option",["str"]],["self"]],[["component"],["option",["component"]]]]],[11,"canonical","tydi::design::library","",2,[[["self"]],["package"]]],[11,"fancy","","",2,[[["self"]],["package"]]],[11,"canonical","tydi::design::project","",3,[[["self"]],["project"]]],[11,"fancy","","",3,[[["self"]],["project"]]],[11,"mode_for","tydi::physical","Return the common representation port mode for this signal…",17,[[["mode"],["self"]],["mode"]]],[11,"declare","tydi::generator::common","",37,[[["self"]],[["result",["string"]],["string"]]]],[11,"declare","","",38,[[["self"]],[["result",["string"]],["string"]]]],[11,"declare","","",25,[[["self"]],[["result",["string"]],["string"]]]],[11,"declare","","",36,[[["self"],["bool"]],[["result",["string"]],["string"]]]],[11,"declare","","",27,[[["self"],["bool"]],[["result",["string"]],["string"]]]],[11,"vhdl_identifier","","",28,[[["self"]],[["result",["string"]],["string"]]]],[11,"vhdl_identifier","","",27,[[["self"]],[["result",["string"]],["string"]]]],[11,"vhdl_identifier","","",36,[[["self"]],[["result",["string"]],["string"]]]],[11,"vhdl_identifier","","",37,[[["self"]],[["result",["string"]],["string"]]]],[11,"list_record_types","","",27,[[["self"]],[["type"],["vec",["type"]]]]],[11,"list_record_types","","",38,[[["self"]],[["type"],["vec",["type"]]]]],[11,"generate","tydi::generator::chisel","",57,[[["project"],["self"]],["result"]]],[11,"generate","tydi::generator::vhdl","",46,[[["project"],["self"]],["result"]]],[11,"as_ref","tydi","",54,[[["self"]]]],[11,"from","","",0,[[["box",["error"]],["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["setloggererror"]],["self"]]],[11,"from","tydi::logical","Wraps this stream in a [`LogicalType`].",9,[[["stream"]],["self"]]],[11,"from","","Wraps this group in a [`LogicalType`].",9,[[["group"]],["self"]]],[11,"from","","Wraps this union in a [`LogicalType`].",9,[[["union"]],["self"]]],[11,"from","","",9,[[["positive"]],["self"]]],[11,"from","tydi::physical","",21,[[["elementstream"]],["physicalstream"]]],[11,"from","","Convert a NonNegative into complexity with the NonNegative…",19,[[["nonnegative"]],["self"]]],[11,"from","","",23,[[["physicalstream"]],["signallist"]]],[11,"from","","",23,[[["physicalstream"]],["signallist"]]],[11,"from","tydi::generator::common","",27,[[["width"]],["self"]]],[11,"from","","",28,[[["mode"]],["self"]]],[11,"from","tydi::generator::vhdl","",46,[[["vhdlconfig"]],["self"]]],[11,"from","tydi","",54,[[["name"]],["self"]]],[11,"clone","tydi::design::library","",2,[[["self"]],["library"]]],[11,"clone","tydi::design::project","",3,[[["self"]],["project"]]],[11,"clone","tydi::design::streamlet","",4,[[["self"]],["mode"]]],[11,"clone","","",5,[[["self"]],["interface"]]],[11,"clone","","",6,[[["self"]],["streamlet"]]],[11,"clone","tydi","",0,[[["self"]],["error"]]],[11,"clone","tydi::logical","",7,[[["self"]],["direction"]]],[11,"clone","","",8,[[["self"]],["synchronicity"]]],[11,"clone","","",12,[[["self"]],["stream"]]],[11,"clone","","",13,[[["self"]],["group"]]],[11,"clone","","",14,[[["self"]],["union"]]],[11,"clone","","",9,[[["self"]],["logicaltype"]]],[11,"clone","","",15,[[["self"]],["elementstream"]]],[11,"clone","","",16,[[["self"]],["signals"]]],[11,"clone","","",10,[[["self"]],["logicalsplititem"]]],[11,"clone","","",11,[[["self"]],["physicalsplititem"]]],[11,"clone","tydi::physical","",19,[[["self"]],["complexity"]]],[11,"clone","","",20,[[["self"]],["fields"]]],[11,"clone","","",21,[[["self"]],["physicalstream"]]],[11,"clone","","",17,[[["self"]],["origin"]]],[11,"clone","","",18,[[["self"]],["width"]]],[11,"clone","","",22,[[["self"]],["signal"]]],[11,"clone","","",23,[[["self"]],["signallist"]]],[11,"clone","tydi::generator::common","",35,[[["self"]],["field"]]],[11,"clone","","",36,[[["self"]],["record"]]],[11,"clone","","",27,[[["self"]],["type"]]],[11,"clone","","",24,[[["self"]],["parameter"]]],[11,"clone","","",28,[[["self"]],["mode"]]],[11,"clone","","",37,[[["self"]],["port"]]],[11,"clone","","",38,[[["self"]],["component"]]],[11,"clone","tydi::generator::vhdl","",39,[[["self"]],["abstractionlevel"]]],[11,"clone","tydi","",52,[[["self"]],["nonzeroreal"]]],[11,"clone","","",53,[[["self"]],["name"]]],[11,"clone","","",54,[[["self"]],["pathname"]]],[11,"default","","",1,[[],["self"]]],[11,"default","tydi::logical","",7,[[],["self"]]],[11,"default","","",8,[[],["self"]]],[11,"default","tydi::physical","",19,[[],["self"]]],[11,"default","tydi::generator::chisel","",56,[[],["self"]]],[11,"default","","",57,[[],["chiselbackend"]]],[11,"default","tydi::generator::vhdl","",39,[[],["self"]]],[11,"default","","",45,[[],["self"]]],[11,"default","","",46,[[],["vhdlbackend"]]],[11,"cmp","tydi::physical","A complexity number is higher than another when the…",19,[[["self"],["complexity"]],["ordering"]]],[11,"cmp","tydi","",52,[[["self"],["nonzeroreal"]],["ordering"]]],[11,"cmp","","",53,[[["self"],["name"]],["ordering"]]],[11,"cmp","","",54,[[["self"],["pathname"]],["ordering"]]],[11,"eq","tydi::design::library","",2,[[["self"],["library"]],["bool"]]],[11,"ne","","",2,[[["self"],["library"]],["bool"]]],[11,"eq","tydi::design::project","",3,[[["project"],["self"]],["bool"]]],[11,"ne","","",3,[[["project"],["self"]],["bool"]]],[11,"eq","tydi::design::streamlet","",4,[[["self"],["mode"]],["bool"]]],[11,"eq","","",5,[[["self"],["interface"]],["bool"]]],[11,"ne","","",5,[[["self"],["interface"]],["bool"]]],[11,"eq","","",6,[[["self"],["streamlet"]],["bool"]]],[11,"ne","","",6,[[["self"],["streamlet"]],["bool"]]],[11,"eq","tydi","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"eq","tydi::logical","",7,[[["direction"],["self"]],["bool"]]],[11,"eq","","",8,[[["synchronicity"],["self"]],["bool"]]],[11,"eq","","",12,[[["self"],["stream"]],["bool"]]],[11,"ne","","",12,[[["self"],["stream"]],["bool"]]],[11,"eq","","",13,[[["group"],["self"]],["bool"]]],[11,"ne","","",13,[[["group"],["self"]],["bool"]]],[11,"eq","","",14,[[["union"],["self"]],["bool"]]],[11,"ne","","",14,[[["union"],["self"]],["bool"]]],[11,"eq","","",9,[[["logicaltype"],["self"]],["bool"]]],[11,"ne","","",9,[[["logicaltype"],["self"]],["bool"]]],[11,"eq","","",15,[[["elementstream"],["self"]],["bool"]]],[11,"ne","","",15,[[["elementstream"],["self"]],["bool"]]],[11,"eq","","",16,[[["self"],["signals"]],["bool"]]],[11,"ne","","",16,[[["self"],["signals"]],["bool"]]],[11,"eq","","",10,[[["self"],["logicalsplititem"]],["bool"]]],[11,"ne","","",10,[[["self"],["logicalsplititem"]],["bool"]]],[11,"eq","","",11,[[["self"],["physicalsplititem"]],["bool"]]],[11,"ne","","",11,[[["self"],["physicalsplititem"]],["bool"]]],[11,"eq","tydi::physical","A complexity number is higher than another when the…",19,[[["self"]],["bool"]]],[11,"eq","","",20,[[["fields"],["self"]],["bool"]]],[11,"ne","","",20,[[["fields"],["self"]],["bool"]]],[11,"eq","","",21,[[["physicalstream"],["self"]],["bool"]]],[11,"ne","","",21,[[["physicalstream"],["self"]],["bool"]]],[11,"eq","","",17,[[["self"],["origin"]],["bool"]]],[11,"eq","","",18,[[["self"],["width"]],["bool"]]],[11,"ne","","",18,[[["self"],["width"]],["bool"]]],[11,"eq","","",22,[[["signal"],["self"]],["bool"]]],[11,"ne","","",22,[[["signal"],["self"]],["bool"]]],[11,"eq","","",23,[[["signallist"],["self"]],["bool"]]],[11,"ne","","",23,[[["signallist"],["self"]],["bool"]]],[11,"eq","tydi::generator::common","",35,[[["field"],["self"]],["bool"]]],[11,"ne","","",35,[[["field"],["self"]],["bool"]]],[11,"eq","","",36,[[["record"],["self"]],["bool"]]],[11,"ne","","",36,[[["record"],["self"]],["bool"]]],[11,"eq","","",27,[[["type"],["self"]],["bool"]]],[11,"ne","","",27,[[["type"],["self"]],["bool"]]],[11,"eq","","",28,[[["self"],["mode"]],["bool"]]],[11,"eq","","",37,[[["self"],["port"]],["bool"]]],[11,"ne","","",37,[[["self"],["port"]],["bool"]]],[11,"eq","tydi","",52,[[["self"],["nonzeroreal"]],["bool"]]],[11,"ne","","",52,[[["self"],["nonzeroreal"]],["bool"]]],[11,"eq","","",53,[[["self"],["name"]],["bool"]]],[11,"ne","","",53,[[["self"],["name"]],["bool"]]],[11,"eq","","",53,[[["string"],["self"]],["bool"]]],[11,"eq","","",53,[[["str"],["self"]],["bool"]]],[11,"eq","","",54,[[["self"],["pathname"]],["bool"]]],[11,"ne","","",54,[[["self"],["pathname"]],["bool"]]],[11,"partial_cmp","tydi::physical","",19,[[["self"],["complexity"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","tydi","",52,[[["self"],["nonzeroreal"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",52,[[["self"],["nonzeroreal"]],["bool"]]],[11,"le","","",52,[[["self"],["nonzeroreal"]],["bool"]]],[11,"gt","","",52,[[["self"],["nonzeroreal"]],["bool"]]],[11,"ge","","",52,[[["self"],["nonzeroreal"]],["bool"]]],[11,"partial_cmp","","",53,[[["self"],["name"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",53,[[["self"],["name"]],["bool"]]],[11,"le","","",53,[[["self"],["name"]],["bool"]]],[11,"gt","","",53,[[["self"],["name"]],["bool"]]],[11,"ge","","",53,[[["self"],["name"]],["bool"]]],[11,"partial_cmp","","",54,[[["self"],["pathname"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",54,[[["self"],["pathname"]],["bool"]]],[11,"le","","",54,[[["self"],["pathname"]],["bool"]]],[11,"gt","","",54,[[["self"],["pathname"]],["bool"]]],[11,"ge","","",54,[[["self"],["pathname"]],["bool"]]],[11,"deref","","",53,[[["self"]],["str"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","tydi::design::library","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","tydi::design::project","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","tydi::design::streamlet","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","tydi","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","tydi::logical","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","tydi::physical","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","tydi::generator::common","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","tydi::generator::vhdl","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","tydi","",52,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",54,[[["formatter"],["self"]],["result"]]],[11,"fmt","","Display the error variants.",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","tydi::physical","Display a complexity level as a version number. The levels…",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","tydi","",53,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",54,[[["formatter"],["self"]],["result"]]],[11,"mul","","",52,[[["nonzeroreal"]]]],[11,"hash","","",52,[[["self"],["__h"]]]],[11,"hash","","",53,[[["self"],["__h"]]]],[11,"hash","","",54,[[["self"],["__h"]]]],[11,"from_iter","","",1,[[["intoiterator"]],["self"]]],[11,"from_iter","","",54,[[["intoiterator"]],["self"]]],[11,"try_from","tydi::logical","Returns a new Bits stream type with the provided bit count…",9,[[["nonnegative"]],["result"]]],[11,"try_from","tydi::physical","Try to convert a vector of NonNegative into a complexity.…",19,[[["nonnegative"],["vec",["nonnegative"]]],["result"]]],[11,"try_from","tydi","",53,[[["str"]],["result"]]],[11,"try_from","","",53,[[["string"]],["result"]]],[11,"try_from","","",54,[[["string"]],["result"]]],[11,"try_from","","",54,[[["str"]],["result"]]],[11,"from_str","tydi::design::streamlet","",4,[[["str"]],["result"]]],[11,"from_str","tydi::logical","",7,[[["str"]],["result"]]],[11,"from_str","","",8,[[["str"]],["result"]]],[11,"from_str","tydi::physical","",19,[[["str"]],["result"]]],[11,"from_str","tydi::generator::vhdl","",39,[[["str"]],["result"]]],[11,"from_str","tydi","",53,[[["str"]],["result"]]],[11,"enabled","","",55,[[["metadata"],["self"]],["bool"]]],[11,"log","","",55,[[["record"],["self"]]]],[11,"flush","","",55,[[["self"]]]],[11,"clap","tydi::generator::vhdl","",39,[[],["app"]]],[11,"from_clap","","",39,[[["argmatches"]],["self"]]],[11,"clap","","",45,[[],["app"]]],[11,"from_clap","","",45,[[["argmatches"]],["self"]]],[11,"augment_clap","","",39,[[["app"]],["app"]]],[11,"from_subcommand","","",39,[[],["option"]]],[11,"is_subcommand","","",39,[[],["bool"]]],[11,"augment_clap","","",45,[[["app"]],["app"]]],[11,"is_subcommand","","",45,[[],["bool"]]]],"p":[[4,"Error"],[3,"UniquelyNamedBuilder"],[3,"Library"],[3,"Project"],[4,"Mode"],[3,"Interface"],[3,"Streamlet"],[4,"Direction"],[4,"Synchronicity"],[4,"LogicalType"],[4,"LogicalSplitItem"],[4,"PhysicalSplitItem"],[3,"Stream"],[3,"Group"],[3,"Union"],[3,"ElementStream"],[3,"Signals"],[4,"Origin"],[4,"Width"],[3,"Complexity"],[3,"Fields"],[3,"PhysicalStream"],[3,"Signal"],[3,"SignalList"],[3,"Parameter"],[3,"Package"],[3,"Project"],[4,"Type"],[4,"Mode"],[8,"Typify"],[8,"Portify"],[8,"Componentify"],[8,"Packify"],[8,"Projectify"],[8,"ModeFor"],[3,"Field"],[3,"Record"],[3,"Port"],[3,"Component"],[4,"AbstractionLevel"],[8,"Declare"],[8,"DeclareType"],[8,"DeclareLibrary"],[8,"VHDLIdentifier"],[8,"Analyze"],[3,"VHDLConfig"],[3,"VHDLBackEnd"],[8,"GenerateProject"],[8,"Document"],[8,"Identify"],[8,"Reverse"],[8,"Reversed"],[3,"NonZeroReal"],[3,"Name"],[3,"PathName"],[3,"Logger"],[3,"ChiselConfig"],[3,"ChiselBackEnd"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);