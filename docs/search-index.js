var searchIndex = JSON.parse('{\
"tydi":{"doc":"Tydi is an open specification for complex data structures â€¦","t":[13,13,8,4,13,8,13,13,13,3,3,6,3,13,3,6,6,6,8,8,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,0,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,0,0,10,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,3,13,4,13,3,3,3,3,3,13,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,17,8,8,8,8,8,8,10,10,10,10,10,10,10,11,11,11,10,4,8,13,8,8,8,13,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,13,13,4,3,13,13,13,3,13,4,4,13,4,13,3,13,13,3,13,13,13,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,3,3,4,3,13,3,3,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BackEndError","CLIError","Document","Error","FileIOError","Identify","InterfaceError","InvalidArgument","InvalidTarget","Logger","Name","NonNegative","NonZeroReal","ParsingError","PathName","Positive","PositiveReal","Result","Reverse","Reversed","UnexpectedDuplicate","UniquelyNamedBuilder","UnknownError","add_item","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","deref","design","doc","enabled","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","finish","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","generator","get","hash","hash","hash","identifier","into","into","into","into","into","into","is_empty","last","len","log","logical","mul","ne","ne","ne","ne","new","new","new","parent","parser","partial_cmp","partial_cmp","partial_cmp","physical","push","reverse","reversed","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","type_id","type_id","type_id","type_id","type_id","type_id","with_item","with_items","library","project","streamlet","Library","borrow","borrow_mut","canonical","clone","clone_into","eq","fancy","fmt","from","from_builder","from_file","identifier","into","ne","streamlets","to_owned","try_from","try_into","type_id","Project","borrow","borrow_mut","canonical","clone","clone_into","eq","fancy","fmt","from","from_builder","identifier","into","libraries","ne","to_owned","try_from","try_into","type_id","In","Interface","Mode","Out","Streamlet","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","canonical","canonical","clone","clone","clone","clone_into","clone_into","clone_into","doc","doc","eq","eq","eq","fancy","fancy","fmt","fmt","fmt","from","from","from","from_builder","from_str","identifier","identifier","interfaces","into","into","into","mode","ne","ne","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_new","typ","type_id","type_id","type_id","with_doc","with_doc","GenerateProject","chisel","common","generate","vhdl","ChiselBackEnd","ChiselConfig","borrow","borrow","borrow_mut","borrow_mut","default","default","from","from","generate","into","into","try_from","try_from","try_into","try_into","type_id","type_id","Bit","BitVec","Component","Field","In","Mode","Out","Package","Parameter","Port","Project","Record","Record","Type","TypeBundle","append_name_nested","bitvec","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","convert","declare","declare","declare","declare","declare","doc","doc","eq","eq","eq","eq","eq","fields","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_reversed","has_reversed","has_reversed","has_reversed_field","identifier","identifier","identifier","identifier","identifier","identifier","insert","insert_new_field","into","into","into","into","into","into","into","into","into","is_empty","is_reversed","libraries","list_record_types","list_record_types","mode","name","ne","ne","ne","ne","new","new","new","new","new_documented","new_empty","new_empty_stream","parameters","ports","record","reversed","reversed","set_doc","set_doc","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vhdl_identifier","vhdl_identifier","vhdl_identifier","vhdl_identifier","with_doc","with_doc","width","CANON_SUFFIX","Componentify","ModeFor","Packify","Portify","Projectify","Typify","canonical","canonical","canonical","canonical","canonical","fancy","fancy","fancy","fancy","fancy","mode_for","AbstractionLevel","Analyze","Canonical","Declare","DeclareLibrary","DeclareType","Fancy","VHDLBackEnd","VHDLConfig","VHDLIdentifier","abstraction","augment_clap","augment_clap","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clap","clap","clone","clone_into","config","declare","declare","declare","default","default","default","fmt","fmt","from","from","from","from","from_clap","from_clap","from_str","from_subcommand","generate","into","into","into","is_subcommand","is_subcommand","list_record_types","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vhdl_identifier","Bits","Desync","Direction","ElementStream","FlatDesync","Flatten","Forward","Group","Group","LogicalSplitItem","LogicalType","Null","PhysicalSplitItem","Reverse","Signals","Signals","Signals","Stream","Stream","Stream","Stream","Sync","Synchronicity","Union","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonical","canonical","canonical","canonical","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compatible","data","default","default","dimensionality","direction","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","fancy","fancy","fancy","fancy","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","into","into","into","into","into","into","into","into","into","into","is_element_only","is_null","is_null","is_signals","is_stream","iter","iter","logical_type","logical_type","logical_type","ne","ne","ne","ne","ne","ne","ne","ne","new","new_basic","path_name","physical","reverse","reverse","split","synchronicity","tag","throughput","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new_bits","try_new_group","try_new_union","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","nom","bits","bool","comment","comment_delimited","comment_doc","comment_doc_block","comment_line","complexity","direction","doc","group","interface","list_of_streamlets","logical_stream_type","mode","name","null","stream","streamlet","synchronicity","take_until_newline_or_eof","union","BitCount","Complexity","Fields","Origin","PhysicalStream","Scalar","Signal","SignalList","Sink","Source","Vector","Width","bit","bit_count","bit_count","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","complexity","data","data_bit_count","default","dimensionality","element_fields","element_lanes","endi","endi_bit_count","eq","eq","eq","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_str","identifier","into","into","into","into","into","into","into","iter","keys","last","last_bit_count","level","major","mode_for","ne","ne","ne","ne","ne","new","new","new","new_major","opt_bit_count","opt_vec","origin","partial_cmp","ready","reversed","signal_list","stai","stai_bit_count","strb","strb_bit_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user","user","user_bit_count","valid","values","vec","width","with_name"],"q":["tydi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::design","","","tydi::design::library","","","","","","","","","","","","","","","","","","","","tydi::design::project","","","","","","","","","","","","","","","","","","","tydi::design::streamlet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::generator","","","","","tydi::generator::chisel","","","","","","","","","","","","","","","","","","","tydi::generator::commontydi::generator::common::Type","tydi::generator::common::convert","","","","","","","","","","","","","","","","","","tydi::generator::vhdl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tydi::logicaltydi::parser","tydi::parser::nom","","","","","","","","","","","","","","","","","","","","","","tydi::physical","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Back-end error.","Generic CLI error.","Trait for things that have documentation.","Error variants used in this crate.","File I/O error.","Trait for things that have names.","Forbidden interface name.","Indicates an invalid argument is provided.","Invalid target.","Simple logger for Tydi.","Type-safe wrapper for valid names.","Non-negative integer.","","Parsing error.","Type-safe path for names.","Positive integer.","Positive real.","Result type with <code>Error</code> variants.","In-place reverse.","Construct reversed items.","Indicates an unexpected duplicate is provided.","A builder for lists of things requiring unique names.","Unknown error.","Add an item to the builder.","","","","","","","","","","","","","","Concatenate stuff using format with an underscore in â€¦","","","","","","","","","","","","","","Constructs that are used to generate hardware designs, â€¦","Return optionally existing user-written documentation of â€¦","","","","","","","","","","","Finalize the builder, checking whether all names are â€¦","","","","Display the error variants.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if this PathName is empty (âˆ…).","","","","Logical streams.","","","","","","Construct a new builder.","","","","Parser methods and implementations for Tydi types.","","","","Physical streams.","","Reverse in-place.","Returns a new reversed instance.","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new name wrapper. Returns an error when the â€¦","","","","","","","","Return this builder with the item appended.","Return this builder with the items appended.","This module contains the [Library] structure, used to â€¦","","This module contains the Streamlet structure.","A collection of Streamlets.","","","","","","","","","","Construct a Library from a UniquelyNamedBuilder with â€¦","Construct a Library from a Streamlet Definition File.","","","","","","","","","A collection of Streamlets.","","","","","","","","","","Construct a Project from a UniquelyNamedBuilder with â€¦","","","","","","","","","The interface is an input of the streamlet.","A Streamlet interface.","Streamlet interface mode.","The interface is an output of the streamlet.","Streamlet interface definition.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a new streamlet from an interface builder that â€¦","","","","Return an iterator over the interfaces of this Streamlet.","","","","Return the [Mode] of the interface.","","","","","","","","","","","","Try to construct a new interface.","Return the [LogicalStreamType] of the interface.","","","","","Return this streamlet with documentation added.","Trait to generate back-end specific source files from the â€¦","Chisel back-end.","Common hardware representation.","Generate source files from a [common::Project] and save â€¦","VHDL back-end.","A configurable VHDL back-end entry point.","Chisel back-end configuration parameters.","","","","","","","","","","","","","","","","","","A single bit.","A vector of bits.","A component.","A field for a <code>Record</code>.","Input.","Modes for ports.","Output.","A library of components and types.","A parameter for components.","A port.","A project with libraries","Inner struct for <code>Type::Record</code>","A record.","Hardware types.","Bundle of names and types. Useful to represent flattened â€¦","Append a string to the name of this record, and any â€¦","Construct a bit vector type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The components declared within the library.66","Generator methods and implementations for Tydi types.","","","","","","","","","","","","","Returns an iterable over the fields.","Flatten a type to a non-nested type bundle.","","","","","","","","","","","","","","","","","","","","","Returns true if the record contains a field that is â€¦","","Returns true if the port type contains reversed fields.","Returns true if the record contains a field that is â€¦","","","","","The identifier.","The name of the project.","Add a field to the record.","Create a new field and add it to the record.","","","","","","","","","","Returns true if record contains no fields.","Returns true if this field is reversed.","The libraries contained within the projects.","","","Return the port mode.","","","","","","Construct a new record field.","Construct a new record.","Create a new port.","Create a new component.","Create a new port with documentation.","Construct a new record without any fields.","Construct a new record with a valid and ready bit.","Return a reference to the parameters of this component.","Return a reference to the ports of this component.","Construct a record type.","","","Set the documentation of this port.","Set the documentation of this component.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the type of this field.","Return the type of the port.","","","","","","","","","","","","","","","Return this port with documentation added.","Return this component with documentation added.","The width of the vector.","Suffix provided to the canonical representation of â€¦","Trait to create common representation components from â€¦","Trait that helps to determine the common representation â€¦","Trait to create common representation of a package.","Trait to create common representation ports from things â€¦","Trait to create common representation of a project.","Trait to create common representation types from things â€¦","","","","","","","","","","","Return the port mode of self, given a streamlet interface â€¦","Abstraction levels","Analyze trait for VHDL objects.","","Generate trait for generic VHDL declarations.","Generate trait for VHDL package declarations.","Generate trait for VHDL type declarations.","","A configurable VHDL back-end entry point.","VHDL back-end configuration parameters.","Generate trait for VHDL identifiers.","","","","","","","","","","","","","","","Generate a VHDL declaration from self.","Generate a VHDL declaration from self.","Generate a VHDL declaration from self.","","","","","","","","","","","","","","","","","","","","List all record types used.","","","","","","","","","","","Generate a VHDL identifier from self.","The Bits stream type, defined as <code>Bits(b)</code>, indicates the â€¦","Desync may be used if the relation between the elements â€¦","Direction of a stream.","An element stream with a path name and LogicalType. â€¦","FlatDesync, finally, does the same thing as Desync, but â€¦","Indicating that there is a one-to-one relation between â€¦","Forward indicates that the child stream flows in the same â€¦","The Group stream type acts as a product type â€¦","The Group stream type acts as a product type â€¦","A split item is either an async signal (outside â€¦","Types of logical streams.","The Null stream type indicates the transferrence of â€¦","A split item is either an async signal (outside â€¦","Reverse indicates that the child stream acts as a â€¦","","","","The stream-manipulating logical stream type.","The Stream type is used to define a new physical stream.","","","Indicating that there is a one-to-one relation between â€¦","The synchronicity of the elements in the child stream â€¦","Reference","The Union stream type acts as a sum type (exclusive â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the dimensionality of this stream.","Returns the direction of this stream.","","","","","","","","","","","","","","","","","Return all fields in this element stream","Returns all fields in these async signals.","","","","","","","","","","","","","","","","","Wraps this group in a <code>LogicalType</code>.","Wraps this union in a <code>LogicalType</code>.","","","Wraps this stream in a <code>LogicalType</code>.","","","","","","","","","","","","","","","","","Returns true if this logical stream consists of only â€¦","Returns true if this stream is null i.e. it results in no â€¦","Returns true if and only if this logical stream does not â€¦","","","Returns an iterator over the fields of the Group.","Returns an iterator over the fields of the Union.","Returns the LogicalType of this element. Contains no â€¦","Returns the LogicalType of this element.","","","","","","","","","","","","","","Reverse this direction.","Reverse the direction of this stream.","","Returns the synchronicity of this stream.","Returns the tag name and width of this union. Reference","Returns the throughput ratio of this stream.","","","","","","","","","","","","","","","","","Returns a new Bits stream type with the provided bit â€¦","","","","","","","","","","","","","","","Returns a new Group logical stream type. Returns an error â€¦","Returns a new Union logical stream type. Returns an error â€¦","Returns a new Bits stream type with the provided bit â€¦","Returns a new Group stream type from the provided â€¦","","","","","","","","","","","","Nom-based parsers for Streamlet Definition Files.","","","","Delimited comments, not meant for doc strings, so if it â€¦","Line comment meant for doc strings.","","Line or eof delimited comment, not meant for doc string, â€¦","","","","","","","","","","","","","","","","Positive number of bits.","Interface complexity level.","","","Physical stream.","Non-vectorized single bit.","","Signal list for the signals in a physical stream.","","","Vectorized multiple bits.","","Returns a single bit non-vector style signal.","Returns the combined bit count of all signals in this â€¦","Returns the bit count of all combined signals in this map.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A complexity number is higher than another when the â€¦","Returns the complexity of this physical stream.","Returns the <code>data</code> signal, if applicable for this â€¦","Returns the bit count of the data (element) fields in â€¦","","Returns the dimensionality of this physical stream.","Returns the element fields in this physical stream.","Returns the number of element lanes in this physical â€¦","Returns the <code>endi</code> signal, if applicable for this â€¦","Returns the number of <code>endi</code> (end index) bits in this â€¦","A complexity number is higher than another when the â€¦","","","","","","","","Display a complexity level as a version number. The â€¦","","","","","","","","","Convert a NonNegative into complexity with the â€¦","","","","","","","","","","","","","","","","","","","","","Returns the <code>last</code> signal, if applicable for this â€¦","Returns the number of last bits in this physical stream. â€¦","Returns the level of this Complexity.","Returns the major version of this Complexity level.","Return the common representation port mode for this â€¦","","","","","","Constructs a new Complexity with provided level. Returns â€¦","","Constructs a new PhysicalStream using provided arguments. â€¦","Constructs a new Complexity with provided level as major â€¦","Returns the bit count of all combined signals in this map.","Returns a vector-style signal if the input width is â€¦","","","Returns the ready signal.","Returns whether the signal is reversed w.r.t. the source","Returns the signal list for this physical stream.","Returns the <code>stai</code> signal, if applicable for this â€¦","Returns the number of <code>stai</code> (start index) bits in this â€¦","Returns the <code>strb</code> signal, if applicable for this â€¦","Returns the number of <code>strb</code> (strobe) bits in this physical â€¦","","","","","","","","","Try to convert a vector of NonNegative into a complexity. â€¦","","","","","","","","","","","","","","","","","","","","","","","Returns the user fields in this physical stream.","Returns the <code>user</code> signal, if applicable for this â€¦","Returns the bit count of the user fields in this physical â€¦","Returns the valid signal.","","Returns a vector-style signal.","",""],"i":[1,1,0,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,2,3,4,2,1,5,6,3,4,2,1,5,6,3,0,1,5,6,3,1,5,6,3,5,6,3,2,6,0,7,4,1,5,6,6,6,3,5,6,3,2,4,2,1,1,5,6,6,3,3,4,2,1,1,1,1,5,6,3,3,2,3,6,0,5,5,6,3,8,4,2,1,5,6,3,3,3,3,4,0,5,1,5,6,3,2,5,3,3,0,5,6,3,0,3,9,10,1,5,6,3,1,6,3,4,2,1,5,6,6,6,3,3,3,4,2,1,5,6,3,6,3,4,2,1,5,6,3,2,2,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,0,0,13,0,13,14,15,13,14,15,14,15,13,14,15,13,14,15,14,15,13,14,15,14,15,13,14,15,13,14,15,15,13,14,15,15,13,14,15,14,14,15,13,14,15,13,14,15,13,14,15,14,14,13,14,15,14,15,0,0,0,16,0,0,0,17,18,17,18,17,18,17,18,18,17,18,17,18,17,18,17,18,19,19,0,0,20,0,20,0,0,0,0,0,19,0,0,21,19,22,21,19,23,20,24,25,26,27,22,21,19,23,20,24,25,26,27,22,21,19,23,20,24,25,22,21,19,23,20,24,25,26,0,21,19,24,25,26,24,25,22,21,19,20,24,21,19,22,21,19,23,20,24,25,26,27,22,21,19,19,23,20,20,24,25,26,27,21,19,24,21,22,21,24,25,26,27,21,21,22,21,19,23,20,24,25,26,27,21,22,27,19,25,24,23,22,21,19,24,22,21,24,25,24,21,21,25,25,19,22,20,24,25,22,21,19,23,20,24,25,22,21,19,23,20,24,25,26,27,22,21,19,23,20,24,25,26,27,22,24,23,22,21,19,23,20,24,25,26,27,21,19,20,24,24,25,28,0,0,0,0,0,0,0,29,30,31,32,33,32,33,29,30,31,34,0,0,35,0,0,0,35,0,0,0,36,35,36,35,36,37,35,36,37,35,36,35,35,37,38,39,40,35,36,37,35,36,35,36,37,37,35,36,35,35,37,35,36,37,35,36,41,35,35,36,37,35,36,37,35,36,37,42,43,44,0,0,44,44,45,0,43,0,0,43,0,45,0,46,47,0,43,46,47,44,0,0,43,45,44,48,49,50,43,51,52,46,47,45,44,48,49,50,43,51,52,46,47,48,49,50,43,45,44,48,49,50,43,51,52,46,47,45,44,48,49,50,43,51,52,46,47,43,48,45,44,48,48,45,44,48,49,50,43,51,52,46,47,45,44,48,49,50,43,51,52,46,45,44,48,49,50,43,51,52,46,47,45,44,48,49,50,43,43,43,43,43,51,52,46,47,45,44,45,44,48,49,50,43,51,52,46,47,43,48,43,46,46,49,50,51,52,46,48,49,50,43,51,52,46,47,48,48,51,43,45,48,43,48,50,48,45,44,48,49,50,43,51,52,46,47,45,44,48,49,50,43,43,51,52,46,47,45,44,48,49,50,43,51,52,46,47,49,50,43,43,43,45,44,48,49,50,43,51,52,46,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,54,54,53,0,55,56,57,58,59,56,54,53,55,57,58,59,56,54,53,55,57,58,59,56,54,53,55,57,58,59,56,54,53,55,57,58,56,57,56,58,56,56,56,57,56,58,59,56,54,53,55,57,58,58,58,59,56,54,53,55,57,58,58,59,56,56,54,53,55,57,57,57,58,55,58,59,56,54,53,55,57,59,59,57,56,58,58,54,59,56,53,55,57,58,59,56,58,57,55,55,58,57,55,56,57,56,57,56,58,59,56,54,53,55,57,58,58,58,59,56,54,53,55,57,58,59,56,54,53,55,57,56,58,59,56,54,53,55,57,56,57,56,57,59,55,55,55],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["error",4]],[[],["nonzeroreal",3]],[[],["name",3]],[[],["pathname",3]],[[]],[[]],[[]],[[]],[[["nonzeroreal",3]],["ordering",4]],[[["name",3]],["ordering",4]],[[["pathname",3]],["ordering",4]],[[]],[[],["str",15]],null,[[],[["string",3],["option",4]]],[[["metadata",3]],["bool",15]],[[["error",4]],["bool",15]],[[["nonzeroreal",3]],["bool",15]],[[["string",3]],["bool",15]],[[["name",3]],["bool",15]],[[["str",15]],["bool",15]],[[["pathname",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["result",6],["vec",3]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["box",3],["error",8]]],[[["error",3]]],[[["setloggererror",3]]],[[]],[[]],[[]],[[["name",3]]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["str",15]],["result",6]],null,[[]],[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],[["option",4],["name",3]]],[[],["usize",15]],[[["record",3]]],null,[[["nonzeroreal",3]]],[[["error",4]],["bool",15]],[[["nonzeroreal",3]],["bool",15]],[[["name",3]],["bool",15]],[[["pathname",3]],["bool",15]],[[]],[[],["result",6]],[[]],[[],[["pathname",3],["option",4]]],null,[[["nonzeroreal",3]],[["option",4],["ordering",4]]],[[["name",3]],[["option",4],["ordering",4]]],[[["pathname",3]],[["option",4],["ordering",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",6]],[[["string",3]],["result",6]],[[],["result",4]],[[["string",3]],["result",6]],[[["str",15]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[]],[[]],[[],["package",3]],[[],["library",3]],[[]],[[["library",3]],["bool",15]],[[],["package",3]],[[["formatter",3]],["result",6]],[[]],[[["name",3],["uniquelynamedbuilder",3],["streamlet",3]],["result",6]],[[["path",3]],["result",6]],[[],["str",15]],[[]],[[["library",3]],["bool",15]],[[],[["vec",3],["streamlet",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["project",3]],[[],["project",3]],[[]],[[["project",3]],["bool",15]],[[],["project",3]],[[["formatter",3]],["result",6]],[[]],[[["name",3],["uniquelynamedbuilder",3],["library",3]],["result",6]],[[],["str",15]],[[]],[[]],[[["project",3]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["port",3],["vec",3]]],[[["str",15],["option",4]],["component",3]],[[],["mode",4]],[[],["interface",3]],[[],["streamlet",3]],[[]],[[]],[[]],[[],[["string",3],["option",4]]],[[],[["string",3],["option",4]]],[[["mode",4]],["bool",15]],[[["interface",3]],["bool",15]],[[["streamlet",3]],["bool",15]],[[],[["port",3],["vec",3]]],[[["str",15],["option",4]],[["component",3],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["option",4],["str",15],["name",3],["interface",3],["uniquelynamedbuilder",3]],["result",6]],[[["str",15]],["result",6]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[],["mode",4]],[[["interface",3]],["bool",15]],[[["streamlet",3]],["bool",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["mode",4],["str",15],["option",4]],["result",6]],[[],["logicaltype",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,[[["project",3]],["result",6]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["chiselbackend",3]],[[]],[[]],[[["project",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["nonnegative",6]],["type",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["field",3]],[[],["record",3]],[[],["type",4]],[[],["parameter",3]],[[],["mode",4]],[[],["port",3]],[[],["component",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["bool",15]],[["string",3],["result",6]]],[[["bool",15]],[["string",3],["result",6]]],[[],[["string",3],["result",6]]],[[],[["string",3],["result",6]]],[[],[["string",3],["result",6]]],[[],[["string",3],["option",4]]],[[],[["string",3],["option",4]]],[[["field",3]],["bool",15]],[[["record",3]],["bool",15]],[[["type",4]],["bool",15]],[[["mode",4]],["bool",15]],[[["port",3]],["bool",15]],[[]],[[["string",3],["vec",3],["bool",15]],["typebundle",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["width",4]]],[[]],[[]],[[["mode",4]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],null,null,[[["field",3]]],[[["type",4],["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[],[["type",4],["vec",3]]],[[],[["type",4],["vec",3]]],[[],["mode",4]],null,[[["field",3]],["bool",15]],[[["record",3]],["bool",15]],[[["type",4]],["bool",15]],[[["port",3]],["bool",15]],[[["type",4],["bool",15]],["field",3]],[[["field",3],["vec",3]],["record",3]],[[["type",4],["mode",4]],["port",3]],[[["vec",3],["port",3],["string",3],["vec",3],["option",4],["parameter",3]],["component",3]],[[["string",3],["type",4],["mode",4],["option",4]],["port",3]],[[],["record",3]],[[],["record",3]],[[],["vec",3]],[[],["vec",3]],[[["field",3],["vec",3]],["type",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["type",4]],[[],["type",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["string",3],["result",6]]],[[],[["string",3],["result",6]]],[[],[["string",3],["result",6]]],[[],[["string",3],["result",6]]],[[]],[[]],null,null,null,null,null,null,null,null,[[],[["vec",3],["signal",3]]],[[],[["port",3],["vec",3]]],[[["str",15],["option",4]],["component",3]],[[],["package",3]],[[],["project",3]],[[],["package",3]],[[],["project",3]],[[],[["option",4],["type",4]]],[[],[["port",3],["vec",3]]],[[["str",15],["option",4]],[["component",3],["option",4]]],[[["mode",4]],["mode",4]],null,null,null,null,null,null,null,null,null,null,[[],["abstractionlevel",4]],[[["app",3]],["app",3]],[[["app",3]],["app",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["app",3]],[[],["app",3]],[[],["abstractionlevel",4]],[[]],[[],["vhdlconfig",3]],[[],[["string",3],["result",6]]],[[["bool",15]],[["string",3],["result",6]]],[[["abstractionlevel",4]],[["string",3],["result",6]]],[[]],[[]],[[],["vhdlbackend",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["vhdlconfig",3]]],[[["argmatches",3]]],[[["argmatches",3]]],[[["str",15]],["result",6]],[[],["option",4]],[[["project",3]],["result",6]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],[["type",4],["vec",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["string",3],["result",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3],["signal",3]]],[[],[["vec",3],["signal",3]]],[[],[["vec",3],["signal",3]]],[[],[["vec",3],["signal",3]]],[[],["direction",4]],[[],["synchronicity",4]],[[],["stream",3]],[[],["group",3]],[[],["union",3]],[[],["logicaltype",4]],[[],["elementstream",3]],[[],["signals",3]],[[],["logicalsplititem",4]],[[],["physicalsplititem",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["logicaltype",4]],["bool",15]],[[],["logicaltype",4]],[[]],[[]],[[],["nonnegative",6]],[[],["direction",4]],[[["direction",4]],["bool",15]],[[["synchronicity",4]],["bool",15]],[[["stream",3]],["bool",15]],[[["group",3]],["bool",15]],[[["union",3]],["bool",15]],[[["logicaltype",4]],["bool",15]],[[["elementstream",3]],["bool",15]],[[["signals",3]],["bool",15]],[[["logicalsplititem",4]],["bool",15]],[[["physicalsplititem",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["type",4]]],[[],[["option",4],["type",4]]],[[],[["option",4],["type",4]]],[[],[["option",4],["type",4]]],[[],["fields",3]],[[],["fields",3]],[[],["fields",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["group",3]]],[[["union",3]]],[[]],[[["positive",6]]],[[["stream",3]]],[[]],[[]],[[]],[[]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["logicaltype",4]],[[],["logicaltype",4]],[[],["logicaltype",4]],[[["stream",3]],["bool",15]],[[["group",3]],["bool",15]],[[["union",3]],["bool",15]],[[["logicaltype",4]],["bool",15]],[[["elementstream",3]],["bool",15]],[[["signals",3]],["bool",15]],[[["logicalsplititem",4]],["bool",15]],[[["physicalsplititem",4]],["bool",15]],[[["synchronicity",4],["bool",15],["option",4],["logicaltype",4],["positivereal",6],["direction",4],["nonnegative",6]]],[[["logicaltype",4]]],[[]],[[],[["intoiter",3],["physicalsplititem",4]]],[[]],[[]],[[],[["logicalsplititem",4],["intoiter",3]]],[[],["synchronicity",4]],[[],["option",4]],[[],["positivereal",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["nonnegative",6]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["result",6]],[[["nonnegative",6]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["str",15]],[["iresult",6],["verboseerror",3],["str",15],["logicaltype",4]]],[[["str",15]],[["verboseerror",3],["iresult",6],["str",15],["bool",15]]],[[["str",15]],[["iresult",6],["verboseerror",3],["str",15]]],[[["str",15]],[["iresult",6],["verboseerror",3],["str",15]]],[[["str",15]],[["iresult",6],["verboseerror",3],["str",15]]],[[["str",15]],[["vec",3],["verboseerror",3],["iresult",6],["str",15]]],[[["str",15]],[["iresult",6],["verboseerror",3],["str",15]]],[[["str",15]],[["verboseerror",3],["str",15],["complexity",3],["iresult",6]]],[[["str",15]],[["verboseerror",3],["iresult",6],["str",15],["direction",4]]],[[["str",15]],[["verboseerror",3],["iresult",6],["str",15],["option",4]]],[[["str",15]],[["iresult",6],["verboseerror",3],["str",15],["logicaltype",4]]],[[["str",15]],[["verboseerror",3],["iresult",6],["str",15],["interface",3]]],[[["str",15]],[["verboseerror",3],["str",15],["vec",3],["iresult",6]]],[[["str",15]],[["iresult",6],["verboseerror",3],["str",15],["logicaltype",4]]],[[["str",15]],[["verboseerror",3],["mode",4],["str",15],["iresult",6]]],[[["str",15]],[["verboseerror",3],["str",15],["iresult",6],["name",3]]],[[["str",15]],[["iresult",6],["verboseerror",3],["str",15],["logicaltype",4]]],[[["str",15]],[["iresult",6],["verboseerror",3],["str",15],["logicaltype",4]]],[[["str",15]],[["verboseerror",3],["streamlet",3],["iresult",6],["str",15]]],[[["str",15]],[["synchronicity",4],["iresult",6],["str",15],["verboseerror",3]]],[[["str",15]],[["iresult",6],["verboseerror",3],["str",15]]],[[["str",15]],[["iresult",6],["verboseerror",3],["str",15],["logicaltype",4]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["origin",4]],["signal",3]],[[],["nonnegative",6]],[[],["nonnegative",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["complexity",3]],[[],["fields",3]],[[],["physicalstream",3]],[[],["origin",4]],[[],["width",4]],[[],["signal",3]],[[],["signallist",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complexity",3]],["ordering",4]],[[],["complexity",3]],[[],[["signal",3],["option",4]]],[[],["nonnegative",6]],[[]],[[],["nonnegative",6]],[[],["fields",3]],[[],["positive",6]],[[],[["signal",3],["option",4]]],[[],["nonnegative",6]],[[],["bool",15]],[[["fields",3]],["bool",15]],[[["physicalstream",3]],["bool",15]],[[["origin",4]],["bool",15]],[[["width",4]],["bool",15]],[[["signal",3]],["bool",15]],[[["signallist",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["nonnegative",6]]],[[]],[[]],[[["elementstream",3]],["physicalstream",3]],[[]],[[]],[[]],[[["physicalstream",3]],["signallist",3]],[[["physicalstream",3]],["signallist",3]],[[]],[[["str",15]],["result",6]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["signal",3],["option",4]]],[[],["nonnegative",6]],[[]],[[],["nonnegative",6]],[[["mode",4]],["mode",4]],[[["fields",3]],["bool",15]],[[["physicalstream",3]],["bool",15]],[[["width",4]],["bool",15]],[[["signal",3]],["bool",15]],[[["signallist",3]],["bool",15]],[[],["result",6]],[[],["result",6]],[[["positive",6],["nonnegative",6]]],[[["nonnegative",6]]],[[],[["option",4],["nonnegative",6]]],[[["origin",4],["option",4],["nonnegative",6]],[["signal",3],["option",4]]],[[],["origin",4]],[[["complexity",3]],[["option",4],["ordering",4]]],[[],["signal",3]],[[],["bool",15]],[[],["signallist",3]],[[],[["signal",3],["option",4]]],[[],["nonnegative",6]],[[],[["signal",3],["option",4]]],[[],["nonnegative",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["vec",3],["nonnegative",6]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["fields",3]],[[],[["signal",3],["option",4]]],[[],["nonnegative",6]],[[],["signal",3]],[[]],[[["origin",4],["positive",6]],["signal",3]],[[],["width",4]],[[["string",3]],["signal",3]]],"p":[[4,"Error"],[3,"UniquelyNamedBuilder"],[3,"PathName"],[3,"Logger"],[3,"NonZeroReal"],[3,"Name"],[8,"Document"],[8,"Identify"],[8,"Reverse"],[8,"Reversed"],[3,"Library"],[3,"Project"],[4,"Mode"],[3,"Interface"],[3,"Streamlet"],[8,"GenerateProject"],[3,"ChiselConfig"],[3,"ChiselBackEnd"],[4,"Type"],[4,"Mode"],[3,"Record"],[3,"Field"],[3,"Parameter"],[3,"Port"],[3,"Component"],[3,"Package"],[3,"Project"],[13,"BitVec"],[8,"Typify"],[8,"Portify"],[8,"Componentify"],[8,"Packify"],[8,"Projectify"],[8,"ModeFor"],[4,"AbstractionLevel"],[3,"VHDLConfig"],[3,"VHDLBackEnd"],[8,"Declare"],[8,"DeclareType"],[8,"DeclareLibrary"],[8,"Analyze"],[8,"VHDLIdentifier"],[4,"LogicalType"],[4,"Synchronicity"],[4,"Direction"],[4,"LogicalSplitItem"],[4,"PhysicalSplitItem"],[3,"Stream"],[3,"Group"],[3,"Union"],[3,"ElementStream"],[3,"Signals"],[4,"Width"],[4,"Origin"],[3,"Signal"],[3,"PhysicalStream"],[3,"SignalList"],[3,"Complexity"],[3,"Fields"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};